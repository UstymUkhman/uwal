import{D as p,C as F}from"./index-BucOref0.js";import{M as g}from"./Math-Cr7J2GA5.js";import{S as P,a as I}from"./Shape-C2nJ7Pn_.js";const L=""+new URL("logo-DEvozEyj.jpg",import.meta.url).href;var M="struct VertexOutput{@location(0)textureCoord: vec2f,@builtin(position)position: vec4f,@location(1)@interpolate(flat)instance: u32};@group(1)@binding(0)var Sampler: sampler;@group(1)@binding(1)var Texture: texture_2d<f32>;@group(1)@binding(2)var<storage,read>visible: array<u32>;@vertex fn vertex(@location(0)position: vec2f,@location(1)translation: vec2f,@builtin(instance_index)instance: u32)->VertexOutput{var output: VertexOutput;let dpr=resolution.z*2.75;let aspect=resolution.xy/resolution.y;let clipSpace=GetVertexClipSpace(position).xy;output.position=vec4f(clipSpace+translation,0,1);output.textureCoord=clipSpace*aspect*dpr+0.5;output.instance=instance;return output;}@fragment fn fragment(@location(0)textureCoord: vec2f,@location(1)@interpolate(flat)instance: u32)->@location(0)vec4f{if(visible[instance]==0){discard;}return textureSample(Texture,Sampler,textureCoord);}";/**
 * @example Textures / Instancing
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is developed by using a version listed below.
 * Please note that this code may be simplified in future
 * thanks to more recent library APIs.
 * @version 0.2.0
 * @license MIT
 */let l,a,S,w,f,O;async function W(d){try{a=new(await p.Renderer(d,"Textures / Instancing"))}catch(e){alert(e)}const m=128,i=256,t=new a.Pipeline;let s,C,u,x,n=512,v=performance.now()-n;const y=t.CreateShaderModule([P,M]);a.CreatePassDescriptor(a.CreateColorAttachment(new F(1651532)));const{buffer:h,layout:T}=t.CreateVertexBuffer("translation",i,"instance");t.WriteBuffer(h,z()),await a.AddPipeline(t,{fragment:t.CreateFragmentState(y),vertex:t.CreateVertexState(y,void 0,[t.CreateVertexBufferLayout("position"),T])});function B(){cancelAnimationFrame(l),clearTimeout(C),v=performance.now()-n}async function R(){A(),V(),await D(),requestAnimationFrame(b),C=setTimeout(()=>n=~(u=-1),n*3)}function A(){const e=new I,[o,r]=a.CanvasSize;e.SetRenderPipeline(a,t,{radius:m}),t.SetDrawParams(e.Vertices,i),t.AddVertexBuffers(h),e.Position=[o/2,r/2],e.Rotation=Math.PI/4,e.Update()}function V(){const e=t.CreateStorageBuffer("visible",i);t.WriteBuffer(e.buffer,e.visible),x=(s=e.visible).length-1,f=e.buffer}function z(){const e=new Float32Array(i*2),o=1-Math.sqrt(2)*m/d.offsetWidth,r=1-Math.sqrt(2)*m/d.offsetHeight;for(let c=i;c--;)e.set([g.Random(-o,o),g.Random(-r,r)],c*2);return e}async function D(){const e=new(await p.Texture());w=await e.CopyImageToTexture(await e.CreateImageBitmap(L),{flipY:!0,create:{mipmaps:!1}}),t.AddBindGroupFromResources([e.CreateSampler(),w.createView(),f],0,1)}function b(e){l=requestAnimationFrame(b),!(e-v<n)&&(n?s.fill(0)&&(u=g.RandomInt(0,x)):++u===x&&cancelAnimationFrame(l),v=e,s[u]=1,t.WriteBuffer(f,s),a.Render())}S=new ResizeObserver(e=>{for(const o of e){let{inlineSize:r,blockSize:c}=o.contentBoxSize[0];r=r<=960&&r||r-240,a.SetCanvasSize(r,c)}B(),R()}),S.observe(document.body)}function j(){p.OnLost=()=>{},cancelAnimationFrame(l),S.disconnect(),a.Destroy(),p.Destroy([f,O],w)}export{j as destroy,W as run};
