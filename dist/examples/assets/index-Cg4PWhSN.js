import{D as f}from"./index-BucOref0.js";import{Q as T}from"./Quad-VFYOTGYq.js";var z="@group(0)@binding(0)var<uniform>resolution: vec3f;fn GetClipSpace(position: vec2f)->vec2f{let clipSpace=position/resolution.xy*2-1;return clipSpace*vec2f(1,-1);}";const C=""+new URL("matrix-Bz2rpV2j.mp4",import.meta.url).href;var E="const ONE_THIRD=1.0/3.0;const RED_BRIGHTNESS=1.2;const BRIGHTNESS=-0.025;const CONTRAST=2.0;struct VertexOutput{@location(0)coord: vec2f,@builtin(position)position: vec4f};@group(0)@binding(1)var Sampler: sampler;@group(0)@binding(2)var<uniform>size: vec2f;@group(0)@binding(3)var Texture: texture_external;@vertex fn vertex(@builtin(vertex_index)index: u32)->VertexOutput {let max=ONE_THIRD*2;var output: VertexOutput;var coord=GetQuadCoord(index);let scale=vec2f(min(resolution.x/size.x,max))*size/resolution.xy;let position=coord*scale*resolution.z-vec2f(0,scale.y);output.position=vec4f(position,0,1);coord=(coord+1.0)*0.5;coord.y=1.0-coord.y;output.coord=coord;return output;}@fragment fn fragment(@location(0)coord: vec2f)->@location(0)vec4f {var color=textureSampleBaseClampToEdge(Texture,Sampler,coord).rgb;color=pow(color,vec3f(0.45));var average=dot(color,vec3f(ONE_THIRD));let weight=smoothstep(0.1,0.25,color.r-average);average=(average-0.5+BRIGHTNESS)*CONTRAST+0.5;color=mix(vec3f(average),vec3f(RED_BRIGHTNESS,0.5,0.5)*color,weight);return vec4f(pow(color,vec3f(2.2)),1);}";/**
 * @example Video Color Grading
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is developed by using a version listed below.
 * Please note that this code may be simplified in future
 * thanks to more recent library APIs.
 * @version 0.2.0
 * @license MIT
 */let d,c,m,v;const e=document.createElement("video");async function H(s){try{c=new(await f.Renderer(s,"Video Color Grading"))}catch(t){alert(t)}const u=await c.CreatePipeline([T,z,E]),h=new(await f.Texture()),S=h.CreateSampler();e.playsinline=e.loop=!0,e.controls=e.muted=!0,e.style.position="absolute";let r,l;e.preload="auto",e.src=C,e.addEventListener("loadedmetadata",()=>{l=e.videoHeight,r=e.videoWidth,x()},!1),document.body.appendChild(e),u.SetDrawParams(6);function x(){const t=s.width/r,{offsetWidth:o,offsetHeight:i}=document.body,p=Math.min(t,1/3*2)*(1/t);if(o<=960){const n=o*p,a=l*n/r;e.style.left=`${(o-n)/2}px`,e.style.top=`${i/2-a}px`,e.style.height=`${a}px`,e.style.width=`${n}px`,e.style.bottom="unset",e.style.right="unset",e.height=a,e.width=n}else{const n=Math.min(s.clientWidth/r,.67),a=r*n,g=l*n;e.style.right=`${(s.clientWidth-a)/2}px`,e.style.bottom=`${s.clientHeight/2}px`,e.style.height=`${g}px`,e.style.width=`${a}px`,e.style.left="unset",e.style.top="unset",e.height=g,e.width=a}}async function w(){await b(),R(),d=requestAnimationFrame(y)}function b(){return new Promise((t,o)=>{if(e.addEventListener("error",o),"requestVideoFrameCallback"in e)e.requestVideoFrameCallback(t);else{const i=()=>e.currentTime?t():requestAnimationFrame(i);i()}e.play().catch(o)})}function R(){const{size:t,buffer:o}=u.CreateUniformBuffer("size");t.set([r,l]),m=o,u.WriteBuffer(o,t)}function y(){d=requestAnimationFrame(y);const t=h.ImportExternalTexture(e);u.SetBindGroupFromResources([c.ResolutionBuffer,S,m,t]),c.Render()}v=new ResizeObserver(t=>{for(const o of t){c.DevicePixelRatio=document.body.offsetWidth>960&&devicePixelRatio||1;let{inlineSize:i,blockSize:p}=o.contentBoxSize[0];i=i<=960&&i||i-240,c.SetCanvasSize(i,p)}(r&&l||d)&&~x()&&~cancelAnimationFrame(d)&&w()}),v.observe(document.body)}function V(){f.OnLost=()=>{},cancelAnimationFrame(d),v.disconnect(),c.Destroy(),e.remove(),f.Destroy(m)}export{V as destroy,H as run};
