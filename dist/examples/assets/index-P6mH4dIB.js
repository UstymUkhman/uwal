import{D as R,C as z}from"./index-BucOref0.js";import{S as A,a as _}from"./Shape-C2nJ7Pn_.js";import{M as n}from"./Math-Cr7J2GA5.js";var G="@fragment fn shapeFragment()->@location(0)vec4f {return shape.color;}";const I=`${A}

${G}`;/**
 * @example 2D Shapes
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is developed by using a version listed below.
 * Please note that this code may be simplified in future
 * thanks to more recent library APIs.
 * @version 0.2.0
 * @license MIT
 */let f,o;const c=[];let S;async function L(u){try{o=new(await R.Renderer(u,"2D Shapes"))}catch(s){alert(s)}const x=new z(3349069),l=[],m=[],h=[],r=new o.Pipeline,v=r.CreateShaderModule(I);await o.AddPipeline(r,{fragment:r.CreateFragmentState(v,"shapeFragment"),vertex:r.CreateVertexState(v,"shapeVertex",r.CreateVertexBufferLayout("position",void 0,"shapeVertex"))}),o.CreatePassDescriptor(o.CreateColorAttachment(x));function y(){l.splice(0),m.splice(0),c.splice(0),h.splice(0),cancelAnimationFrame(f)}function D(){P(),f=requestAnimationFrame(B)}function P(){const[s,d]=o.CanvasSize;for(let e=3;e<=12;e++){const p=e===11&&64||e;for(let t=0;t<2;t++){const a=new _,i=n.Random(50,100),C={innerRadius:n.Random(.75,.95)*i*t,segments:p,radius:i};a.SetRenderPipeline(o,r,C),a.Rotation=n.Random(0,n.TAU),a.Position=[n.Random(i,s-i),n.Random(i,d-i)],m.push(n.Random(1,10)),l.push(n.Random(0,.1)),a.Color=x.rgb=[n.Random(.3,1),n.Random(.2,1),n.Random(.4,1)],h.push([n.Random(-1,1),n.Random(-1,1)]),c.push(a)}}}function B(){const[s,d]=o.CanvasSize;for(let e=0,p=c.length;e<p;e++){const t=c[e],a=h[e],{BindGroupResources:i,VertexBuffer:V,IndexBuffer:C,Vertices:M}=t;r.SetBindGroupFromResources(t.BindGroupResources),r.SetVertexBuffers(t.VertexBuffer),r.SetIndexBuffer(...t.IndexBuffer),r.SetDrawParams(t.Vertices);const{min:g,max:w}=t.BoundingBox,[F,b]=t.Position;(g[0]<=0||w[0]>=s)&&(a[0]*=-1),(g[1]<=0||w[1]>=d)&&(a[1]*=-1),t.Position=[F+a[0]*m[e],b+a[1]*m[e]],t.Rotation+=l[e],t.Update(),o.Render(!1)}o.Submit(),f=requestAnimationFrame(B)}S=new ResizeObserver(s=>{for(const d of s){let{inlineSize:e,blockSize:p}=d.contentBoxSize[0];e=e<=960&&e||e-240,o.SetCanvasSize(e,p)}y(),D()}),S.observe(document.body)}function O(){c.forEach(u=>u.Destroy()),R.OnLost=()=>{},cancelAnimationFrame(f),S.disconnect(),o.Destroy(),c.splice(0),R.Destroy()}export{O as destroy,L as run};
