import{a as c,T as x,E as d}from"./index-BucOref0.js";import{a as h,b as n,M as g}from"./Math-Cr7J2GA5.js";var C="struct Shape{color: vec4f,matrix: mat3x3f};@group(0)@binding(0)var<uniform>resolution: vec3f;fn GetClipSpace(position: vec2f)->vec2f{let clipSpace=position/resolution.xy*2-1;return clipSpace*vec2f(1,-1);}@group(0)@binding(1)var<uniform>shape: Shape;fn GetVertexClipSpace(position: vec2f)->vec4f{let matrixPosition=shape.matrix*vec3f(position,1);let clipSpace=GetClipSpace(matrixPosition.xy);return vec4f(clipSpace,0,1);}@vertex fn shapeVertex(@location(0)position: vec2f)->@builtin(position)vec4f {return GetVertexClipSpace(position);}";class v{#B=h.create();#S=h.create();#g=h.create();#P=h.create();#r;#m;#o=0;#e=0;#f;#i;#c;#u;#h;#t;#n=!1;#R;#l=n.set(1,1);#s=n.set(0,0);#x=n.set(0,0);#p=n.set(0,0);#d;#a=c({min:n.create(),max:n.create()});constructor(t){this.Scale=this.#l,this.Origin=this.#s,this.Rotation=this.#o,this.Position=this.#p,this.#r=t??"Shape"}async CreatePipeline(t,e){const i=`${this.#r} Pipeline`;Array.isArray(e)||typeof e=="string"?e={shader:e,pipelineName:i}:e instanceof GPUShaderModule?e={module:e,pipelineName:i}:e.pipelineName??=i;const r=await s.CreatePipeline(e),s=t.renderer??t;return this.SetRenderPipeline(s,r,t)}SetRenderPipeline(t,e,i={}){this.#t=e;const{segments:r=4,radius:s=0}=i;return this.#e=s,this.Origin=this.#s,this.#C(i,r),this.#v(r),this.#y(t),this.#t}AddVertexBuffers(t,e,i){!this.#t&&x(d.PIPELINE_NOT_FOUND,"RenderPipeline.\n            Use `Shape.CreatePipeline` or `Shape.SetRenderPipeline` method before adding vertex buffers."),this.#t.AddVertexBuffers(t,e,i)}#C(t,e){const i=new Float32Array((e+1)*2*3),{endAngle:r=g.TAU,startAngle:s=0,radius:B=0,innerRadius:f=0}=t,S=r-s;this.#e=B;for(let a=0,o=0;o<=e;++o){const u=s+o*S/e,l=Math.cos(u),p=Math.sin(u);i[a++]=l*this.#e,i[a++]=p*this.#e,i[a++]=l*f,i[a++]=p*f}this.#u=this.#t.CreateVertexBuffer(i,{label:`${this.#r} Vertex Buffer`}),this.#t.WriteBuffer(this.#u,i),this.#t.SetVertexBuffers(this.#u)}#v(t){const e=new Uint16Array(t*6);for(let i=0,r=0;r<t;++r){const s=r*2;e[i++]=s+1,e[i++]=s+3,e[i++]=s+2,e[i++]=s+2,e[i++]=s+0,e[i++]=s+1}this.#c=this.#t.CreateIndexBuffer(e,{label:`${this.#r} Index Buffer`}),this.#t.SetDrawParams(this.#m=e.length),this.#t.WriteBuffer(this.#c,e),this.#t.SetIndexBuffer(...this.IndexBuffer)}#y(t){const{buffer:e,shape:{color:i,matrix:r}}=this.#t.CreateUniformBuffer("shape",{label:`${this.#r} Uniform Buffer`});this.#R=t.ResolutionBuffer,this.#h=e,this.#i=r,this.#f=i,this.#t.SetBindGroupFromResources(this.BindGroupResources,0,0,`${this.#r} Bind Group`),this.#d=c({matrix:i.length*Float32Array.BYTES_PER_ELEMENT,color:0*Float32Array.BYTES_PER_ELEMENT})}Update(){if(this.#n){h.multiply(this.#P,this.#g,this.#i),h.multiply(this.#i,this.#S,this.#i),h.multiply(this.#i,this.#B,this.#i),this.#t.WriteBuffer(this.#h,this.#i,this.#d.matrix);const t=this.#x[0]=this.#i[8],e=this.#x[1]=this.#i[9];this.#a.min[0]=t-this.#e,this.#a.min[1]=e-this.#e,this.#a.max[0]=t+this.#e,this.#a.max[1]=e+this.#e,this.#n=!1}}set Color(t){!this.#t&&x(d.PIPELINE_NOT_FOUND,"RenderPipeline.\n            Use `Shape.CreatePipeline` or `Shape.SetRenderPipeline` method before setting the color."),this.#f.set((Array.isArray(t)||ArrayBuffer.isView(t))&&t||t.rgba),this.#t.WriteBuffer(this.#h,this.#f,this.#d.color)}get Color(){return this.#f}set Position(t){this.#p.set(t),h.translation(this.#p,this.#P),this.#n=!0}get Position(){return this.#p}set Rotation(t){this.#o=t,h.rotation(this.#o,this.#g),this.#n=!0}get Rotation(){return this.#o}set Scale(t){this.#l.set(t),h.scaling(this.#l,this.#S),this.#n=!0}get Scale(){return this.#l}set Origin(t){this.#s[0]=t[0],this.#s[1]=t[1],this.#s[0]*=-this.#e,this.#s[1]*=-this.#e,h.translation(this.#s,this.#B),this.#s[0]=t[0]||0,this.#s[1]=t[1]||0,this.#n=!0}get Origin(){return this.#s}get Center(){return this.Update(),this.#x}get Transform(){return this.Update(),this.#i}get BoundingBox(){return this.Update(),this.#a}get BindGroupResources(){return[this.#R,this.#h]}get VertexBuffer(){return this.#u}get IndexBuffer(){return[this.#c,"uint16"]}get Vertices(){return this.#m}Destroy(){this.#t.Destroy(),this.#h.destroy(),this.#h=void 0}}export{C as S,v as a};
