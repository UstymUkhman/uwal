import{U as p,C as M,F as _}from"./index-DDCPJUwH.js";import{S as G,a as N}from"./Shape-CXfo-itF.js";const V=""+new URL("logo-DEvozEyj.jpg",import.meta.url).href;var Y="struct VertexOutput{@location(0)textureCoord: vec2f,@builtin(position)position: vec4f,@location(1)@interpolate(flat)instance: u32};@group(1)@binding(0)var Sampler: sampler;@group(1)@binding(1)var Texture: texture_2d<f32>;@group(1)@binding(2)var<storage,read>visible: array<u32>;@vertex fn vertex(@location(0)position: vec2f,@location(1)translation: vec2f,@builtin(instance_index)instance: u32)->VertexOutput{var output: VertexOutput;let aspect=resolution.xy/resolution.y;let clipSpace=GetVertexClipSpace(position).xy;output.position=vec4f(clipSpace+translation,0,1);output.textureCoord=clipSpace*aspect*2.5+0.5;output.instance=instance;return output;}@fragment fn fragment(@location(0)textureCoord: vec2f,@location(1)@interpolate(flat)instance: u32)->@location(0)vec4f{if(visible[instance]==0){discard;}return textureSample(Texture,Sampler,textureCoord);}";/**
 * @example Textures / Instancing
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is developed by using a version listed below.
 * Please note that this code may be simplified in future
 * thanks to more recent library APIs.
 * @version 0.0.5
 * @license MIT
 */let l,g;async function D(i){let t;try{t=new(await p.RenderPipeline(i,"Textures / Instancing"))}catch(e){alert(e)}const d=128,s=100;let n,u,x,m,c,o=500,E=performance.now()-o;const S=t.CreateShaderModule([G,Y]),B=t.CreateColorAttachment();B.clearValue=new M(1651532).rgba,t.CreatePassDescriptor(B),t.CreatePipeline({fragment:t.CreateFragmentState(S),vertex:t.CreateVertexState(S,void 0,[{arrayStride:Float32Array.BYTES_PER_ELEMENT*2,attributes:[t.CreateVertexBufferAttribute("float32x2")]},{stepMode:"instance",arrayStride:Float32Array.BYTES_PER_ELEMENT*2,attributes:[t.CreateVertexBufferAttribute("float32x2",1)]}])});function h(){cancelAnimationFrame(l),clearTimeout(m),E=performance.now()-o}async function U(){P(),R(),b(),await w(),requestAnimationFrame(C),m=setTimeout(()=>o=~(c=-1),o*3)}function P(){const e=new N({renderer:t,segments:4,radius:d});e.Position=[i.width/2,i.height/2],e.Rotation=Math.PI/4,x=e.Update().Vertices}function R(){const e=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,r=Uint32Array.BYTES_PER_ELEMENT*s;n=new Uint32Array(r/Uint32Array.BYTES_PER_ELEMENT),u=t.CreateBuffer({size:r,usage:e}),t.WriteBuffer(u,n)}function b(){const e=1-Math.sqrt(2)*d/i.height,r=1-Math.sqrt(2)*d/i.width,a=Float32Array.BYTES_PER_ELEMENT*2,f=a*s,F=GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,y=t.CreateBuffer({size:f,usage:F}),L=a/Float32Array.BYTES_PER_ELEMENT,A=new Float32Array(f/Float32Array.BYTES_PER_ELEMENT);for(let v=s;v--;)A.set([T(-r,r),T(-e,e)],L*v);t.WriteBuffer(y,A),t.AddVertexBuffers(y)}async function w(){const e=new(await p.Texture()),r=await e.CreateBitmapImage(await(await fetch(V)).blob(),{colorSpaceConversion:"none"}),a=e.CopyImageToTexture(r,{flipY:!0,create:{usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,format:"rgba8unorm",mipmaps:!1}});t.AddBindGroups(t.CreateBindGroup(t.CreateBindGroupEntries([e.CreateSampler({magFilter:_.LINEAR,minFilter:_.LINEAR}),a.createView(),{buffer:u}]),1))}function T(e,r){return e===void 0?(e=0,r=1):r===void 0&&(r=e,e=0),Math.random()*(r-e)+e}function C(e){l=requestAnimationFrame(C),!(e-E<o)&&(o?n.fill(0)&&(c=T(n.length)|0):++c===n.length-1&&cancelAnimationFrame(l),E=e,n[c]=1,t.WriteBuffer(u,n),t.Render([x,s]))}g=new ResizeObserver(e=>{for(const r of e){let{inlineSize:a,blockSize:f}=r.contentBoxSize[0];a=a<=960&&a||a-240,t.SetCanvasSize(a,f)}h(),U()}),g.observe(document.body)}function z(){p.OnDeviceLost=()=>{},cancelAnimationFrame(l),g.disconnect(),p.Destroy()}export{z as destroy,D as run};
