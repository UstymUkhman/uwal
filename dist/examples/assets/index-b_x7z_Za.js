import{U as r}from"./index-BEcPMtkb.js";var x="const QUAD=array(vec2f(-1.0,-1.0),vec2f(1.0,-1.0),vec2f(1.0,1.0),vec2f(1.0,1.0),vec2f(-1.0,1.0),vec2f(-1.0,-1.0));fn GetQuadCoord(index: u32)->vec2f{return QUAD[index];}",C="struct Screen{color: vec3f,time: f32};struct VertexOutput{@location(0)coord: vec2f,@builtin(position)position: vec4f};@group(0)@binding(0)var<uniform>screen: Screen;@vertex fn vertex(@builtin(vertex_index)index: u32)->VertexOutput {var output: VertexOutput;let coord=GetQuadCoord(index);output.position=vec4f(coord,0,1);output.coord=coord;return output;}@fragment fn fragment(@location(0)coord: vec2f)->@location(0)vec4f {return vec4f(cos(coord.xyx+screen.time)*0.2+screen.color+0.4,1);}";/**
 * @example Screen Shader
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is inspired by OGL's "Triangle Screen Shader"
 * {@link https://oframe.github.io/ogl/examples/?src=triangle-screen-shader.html}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.3
 * @license MIT
 */let o,c;async function A(n){let e;try{e=new(await r.RenderPipeline(n,"Screen Shader"))}catch(t){alert(t)}const a=e.CreateRenderPassDescriptor(e.CreateColorAttachment()),u=e.CreateShaderModule([x,C]),l=e.CreateRenderPipeline({vertex:e.CreateVertexState(u),fragment:e.CreateFragmentState(u)}),f=Float32Array.BYTES_PER_ELEMENT+Float32Array.BYTES_PER_ELEMENT*3,s=e.CreateBuffer({size:f,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),v=e.CreateBindGroup(e.CreateBindGroupEntries({buffer:s}));e.SetBindGroups(v);const i=new Float32Array(f/Float32Array.BYTES_PER_ELEMENT);i.set([0,.3515625,.609375]);function d(t){i.set([t*.001],3),r.SetCanvasSize(n.width,n.height),a.colorAttachments[0].view=r.CurrentTextureView,e.WriteBuffer(s,i),e.Render(a,l,6),o=requestAnimationFrame(d)}c=new ResizeObserver(t=>{for(const m of t){const{inlineSize:p,blockSize:S}=m.contentBoxSize[0];r.SetCanvasSize(p,S)}cancelAnimationFrame(o),o=requestAnimationFrame(d)}),c.observe(n)}function B(){r.OnDeviceLost=()=>{},cancelAnimationFrame(o),c.disconnect(),r.Destroy()}export{B as destroy,A as run};
