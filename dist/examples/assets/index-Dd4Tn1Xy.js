import{U as s}from"./index-BWftAgnI.js";var L="struct VertexOutput{@location(0)cell: vec2f,@builtin(position)position: vec4f};@group(0)@binding(0)var<uniform>grid: vec2f;@group(0)@binding(1)var<storage>state: array<u32>;@vertex fn vertex(@location(0)position: vec2f,@builtin(instance_index)instance: u32)->VertexOutput{let fInstance=f32(instance);let state=f32(state[instance]);let cell=vec2f(fInstance % grid.x,floor(fInstance/grid.x));var output: VertexOutput;output.position=vec4f((position*state+1)/grid-1+cell/grid*2,0,1);output.cell=cell;return output;}@fragment fn fragment(@location(0)cell: vec2f)->@location(0)vec4f {let rg=cell/grid;return vec4f(rg,1-rg.g,1);}",M="@group(0)@binding(0)var<uniform>grid: vec2f;@group(0)@binding(1)var<storage>cellStateIn: array<u32>;@group(0)@binding(2)var<storage,read_write>cellStateOut: array<u32>;fn cellIndex(cell: vec2u)->u32{return(cell.x % u32(grid.x))+(cell.y % u32(grid.y))*u32(grid.x);}fn cellActive(x: u32,y: u32)->u32{return cellStateIn[cellIndex(vec2(x,y))];}@compute @workgroup_size(8,8)fn compute(@builtin(global_invocation_id)cell: vec3u){let activeNeighbors=cellActive(cell.x+1,cell.y+1)+cellActive(cell.x+1,cell.y)+cellActive(cell.x+1,cell.y-1)+cellActive(cell.x,cell.y-1)+cellActive(cell.x-1,cell.y-1)+cellActive(cell.x-1,cell.y)+cellActive(cell.x-1,cell.y+1)+cellActive(cell.x,cell.y+1);let i=cellIndex(cell.xy);switch activeNeighbors{case 2:{cellStateOut[i]=cellStateIn[i];}case 3:{cellStateOut[i]=1;}default:{cellStateOut[i]=0;}}}";/**
 * @example Game Of Life
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is inspired by Google Codelabs "Your first WebGPU app"
 * {@link https://codelabs.developers.google.com/your-first-webgpu-app}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.4
 * @license MIT
 */let f,x;async function F(b){let e,t;try{e=new(await s.RenderPipeline(b,"Game Of Life Render")),t=new(await s.ComputePipeline("Game Of Life Compute"))}catch(r){alert(r)}let i,l,c,d,g=0,p=performance.now();const u=[],h=8,P=250,O=e.CreatePassDescriptor(e.CreateColorAttachment(void 0,"clear","store",[0,0,.4,1])),v=t.CreateBindGroupLayout([{buffer:{type:"uniform"},visibility:GPUShaderStage.COMPUTE|GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT},{buffer:{type:"read-only-storage"},visibility:GPUShaderStage.COMPUTE|GPUShaderStage.VERTEX},{buffer:{type:"storage"},visibility:GPUShaderStage.COMPUTE}]),U=e.CreateShaderModule(L),E=e.CreateFragmentState(U),R=e.CreateVertexState(U,"vertex",{attributes:[e.CreateVertexBufferAttribute("float32x2")],arrayStride:8}),A=t.CreatePipelineLayout(v),w=t.CreateShaderModule(M);e.CreatePipeline({layout:A,vertex:R,fragment:E}),t.CreatePipeline({layout:A,module:w});const y=new Float32Array([-.8,-.8,.8,-.8,.8,.8,.8,.8,-.8,.8,-.8,-.8]),T=y.length/2,B=e.CreateBuffer({size:y.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.WriteBuffer(B,y),e.SetVertexBuffers(B);function I(){cancelAnimationFrame(f),u.splice(g=0),p=performance.now(),[i,l,c].forEach(r=>r==null?void 0:r.destroy())}function _(r=48){const n=e.AspectRatio,{width:S,height:C}=e.Canvas,a=S<C?new Float32Array([r,Math.round(r/n)]):new Float32Array([Math.round(r*n),r]);i=e.CreateBuffer({size:a.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),e.WriteBuffer(i,a),d=a[0]*a[1];const o=new Uint32Array(d);l=t.CreateBuffer({size:o.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),c=t.CreateBuffer({size:o.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});for(let m=0;m<o.length;m++)o[m]=+(Math.random()>.6);t.WriteBuffer(l,o),t.Workgroups=[Math.ceil(a[0]/h),Math.ceil(a[1]/h)],u.push(t.CreateBindGroup(t.CreateBindGroupEntries([{buffer:i},{buffer:l},{buffer:c}]),v),t.CreateBindGroup(t.CreateBindGroupEntries([{buffer:i},{buffer:c},{buffer:l}]),v)),f=requestAnimationFrame(G)}function G(r){if(f=requestAnimationFrame(G),r-p<P)return;const n=t.CreateCommandEncoder();t.SetBindGroups(u[g%2]),t.Compute(),e.SetCommandEncoder(n),e.SetBindGroups(u[++g%2]),O.colorAttachments[0].view=e.CurrentTextureView,e.Render([T,d]),p=r}x=new ResizeObserver(r=>{for(const n of r){const{inlineSize:S,blockSize:C}=n.contentBoxSize[0];e.SetCanvasSize(S,C)}I(),_()}),x.observe(b)}function D(){s.OnDeviceLost=()=>{},cancelAnimationFrame(f),x.disconnect(),s.Destroy()}export{D as destroy,F as run};
