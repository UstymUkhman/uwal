import{D as f}from"./index-xJ8VogwN.js";import{Q as b}from"./Quad-VFYOTGYq.js";var E="@group(0)@binding(0)var<uniform>resolution: vec3f;fn GetClipSpace(position: vec2f)->vec2f{let clipSpace=position/resolution.xy*2-1;return clipSpace*vec2f(1,-1);}";const R=""+new URL("matrix-Bz2rpV2j.mp4",import.meta.url).href;var B="const ONE_THIRD=1.0/3.0;const RED_BRIGHTNESS=1.2;const BRIGHTNESS=-0.025;const CONTRAST=2.0;struct VertexOutput{@location(0)coord: vec2f,@builtin(position)position: vec4f};@group(0)@binding(2)var Sampler: sampler;@group(0)@binding(1)var<uniform>size: vec2f;@group(0)@binding(3)var Texture: texture_external;@vertex fn vertex(@builtin(vertex_index)index: u32)->VertexOutput {let max=ONE_THIRD*2;var output: VertexOutput;var coord=GetQuadCoord(index);let scale=vec2f(min(resolution.x/size.x,max))*size/resolution.xy;let position=coord*scale-vec2f(0,scale.y);output.position=vec4f(position,0,1);coord=(coord+1.0)*0.5;coord.y=1.0-coord.y;output.coord=coord;return output;}@fragment fn fragment(@location(0)coord: vec2f)->@location(0)vec4f {var color=textureSampleBaseClampToEdge(Texture,Sampler,coord).rgb;color=pow(color,vec3f(0.45));var average=dot(color,vec3f(ONE_THIRD));let weight=smoothstep(0.1,0.25,color.r-average);average=(average-0.5+BRIGHTNESS)*CONTRAST+0.5;color=mix(vec3f(average),vec3f(RED_BRIGHTNESS,0.5,0.5)*color,weight);return vec4f(pow(color,vec3f(2.2)),1);}";/**
 * @example Video Color Grading
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is developed by using a version listed below.
 * Please note that this code may be simplified in future
 * thanks to more recent library APIs.
 * @version 0.0.6
 * @license MIT
 */let l,u,m;const e=document.createElement("video");let o;async function G(c){try{o=new(await f.RenderPipeline(c,"Video Color Grading"))}catch(t){alert(t)}const v=new(await f.Texture()),S=v.CreateSampler();let s,d,h;e.playsinline=e.loop=!0,e.controls=e.muted=!0,e.style.position="absolute",e.preload="auto",e.src=R,o.CreatePipeline({module:o.CreateShaderModule([b,E,B])}),o.CreatePassDescriptor(o.CreateColorAttachment()),e.addEventListener("loadedmetadata",()=>{d=e.videoHeight,s=e.videoWidth,x()},!1),document.body.appendChild(e);function x(){const t=c.width/e.videoWidth,{offsetWidth:i,offsetHeight:r}=document.body,p=Math.min(t,1/3*2)*(1/t);if(i<=960){const n=i*p,a=d*n/s;e.style.left=`${(i-n)/2}px`,e.style.top=`${r/2-a}px`,e.style.height=`${a}px`,e.style.width=`${n}px`,e.height=a,e.width=n}else{const n=Math.min(c.width/s,.67),a=s*n,y=d*n;e.style.right=`${(c.width-a)/2}px`,e.style.bottom=`${c.height/2}px`,e.style.height=`${y}px`,e.style.width=`${a}px`,e.height=y,e.width=a}}async function w(){await C(),T(),l=requestAnimationFrame(g)}function C(){return new Promise((t,i)=>{if(e.addEventListener("error",i),"requestVideoFrameCallback"in e)e.requestVideoFrameCallback(t);else{const r=()=>e.currentTime?t():requestAnimationFrame(r);r()}e.play().catch(i)})}function T(){const t=new Float32Array(2);u=o.CreateBuffer({size:Float32Array.BYTES_PER_ELEMENT*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),t.set([e.videoWidth,e.videoHeight]),o.WriteBuffer(u,t)}function g(){l=requestAnimationFrame(g);const t=v.ImportExternalTexture(e);o.SetBindGroups(o.CreateBindGroup(o.CreateBindGroupEntries([{buffer:h},{buffer:u},S,t]))),o.Render(6)}m=new ResizeObserver(t=>{for(const i of t){let{inlineSize:r,blockSize:p}=i.contentBoxSize[0];r=r<=960&&r||r-240,o.SetCanvasSize(r,p),h=o.ResolutionBuffer}s&&d&&x(),cancelAnimationFrame(l),w()}),m.observe(document.body)}function O(){f.OnDeviceLost=()=>{},cancelAnimationFrame(l),m.disconnect(),e.remove(),o.Destroy(),f.Destroy(u)}export{O as destroy,G as run};
