import{U as n}from"./index-BEcPMtkb.js";var V="struct VertexOutput{@location(0)cell: vec2f,@builtin(position)position: vec4f};@group(0)@binding(0)var<uniform>grid: vec2f;@group(0)@binding(1)var<storage>state: array<u32>;@vertex fn vertex(@location(0)position: vec2f,@builtin(instance_index)instance: u32)->VertexOutput{let fInstance=f32(instance);let state=f32(state[instance]);let cell=vec2f(fInstance % grid.x,floor(fInstance/grid.x));var output: VertexOutput;output.position=vec4f((position*state+1)/grid-1+cell/grid*2,0,1);output.cell=cell;return output;}@fragment fn fragment(@location(0)cell: vec2f)->@location(0)vec4f {let rg=cell/grid;return vec4f(rg,1-rg.g,1);}",F="@group(0)@binding(0)var<uniform>grid: vec2f;@group(0)@binding(1)var<storage>cellStateIn: array<u32>;@group(0)@binding(2)var<storage,read_write>cellStateOut: array<u32>;fn cellIndex(cell: vec2u)->u32{return(cell.x % u32(grid.x))+(cell.y % u32(grid.y))*u32(grid.x);}fn cellActive(x: u32,y: u32)->u32{return cellStateIn[cellIndex(vec2(x,y))];}@compute @workgroup_size(8,8)fn compute(@builtin(global_invocation_id)cell: vec3u){let activeNeighbors=cellActive(cell.x+1,cell.y+1)+cellActive(cell.x+1,cell.y)+cellActive(cell.x+1,cell.y-1)+cellActive(cell.x,cell.y-1)+cellActive(cell.x-1,cell.y-1)+cellActive(cell.x-1,cell.y)+cellActive(cell.x-1,cell.y+1)+cellActive(cell.x,cell.y+1);let i=cellIndex(cell.xy);switch activeNeighbors{case 2:{cellStateOut[i]=cellStateIn[i];}case 3:{cellStateOut[i]=1;}default:{cellStateOut[i]=0;}}}";/**
 * @example Game Of Life
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is inspired by Google Codelabs "Your first WebGPU app"
 * {@link https://codelabs.developers.google.com/your-first-webgpu-app}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.3
 * @license MIT
 */let s,x;async function N(b){let e,t;try{e=new(await n.RenderPipeline(b,"Game Of Life Render")),t=new(await n.ComputePipeline("Game Of Life Compute"))}catch(r){alert(r)}let l,o,u,d,g=0,p=performance.now();const f=[],P=8,O=250,h=e.CreateRenderPassDescriptor(e.CreateColorAttachment(void 0,"clear","store",[0,0,.4,1])),v=t.CreateBindGroupLayout([{buffer:{type:"uniform"},visibility:GPUShaderStage.COMPUTE|GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT},{buffer:{type:"read-only-storage"},visibility:GPUShaderStage.COMPUTE|GPUShaderStage.VERTEX},{buffer:{type:"storage"},visibility:GPUShaderStage.COMPUTE}]),U=t.CreatePipelineLayout(v),A=e.CreateShaderModule(V),E=e.CreateFragmentState(A),R=e.CreateVertexState(A,"vertex",{attributes:[e.CreateVertexBufferAttribute("float32x2")],arrayStride:8}),w=e.CreateRenderPipeline({layout:U,vertex:R,fragment:E}),T=t.CreateShaderModule(F),I=t.CreateComputePipeline({layout:U,module:T}),y=new Float32Array([-.8,-.8,.8,-.8,.8,.8,.8,.8,-.8,.8,-.8,-.8]),L=y.length/2,B=e.CreateBuffer({size:y.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});e.WriteBuffer(B,y),e.SetVertexBuffers(B);function M(){cancelAnimationFrame(s),f.splice(g=0),p=performance.now(),[l,o,u].forEach(r=>r==null?void 0:r.destroy())}function _(r=48){const a=n.AspectRatio,{width:S,height:C}=n.Canvas,i=S<C?new Float32Array([r,Math.round(r/a)]):new Float32Array([Math.round(r*a),r]);l=e.CreateBuffer({size:i.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),e.WriteBuffer(l,i),d=i[0]*i[1];const c=new Uint32Array(d);o=t.CreateBuffer({size:c.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),u=t.CreateBuffer({size:c.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});for(let m=0;m<c.length;m++)c[m]=+(Math.random()>.6);t.WriteBuffer(o,c),t.Workgroups=[Math.ceil(i[0]/P),Math.ceil(i[1]/P)],f.push(t.CreateBindGroup(t.CreateBindGroupEntries([{buffer:l},{buffer:o},{buffer:u}]),v),t.CreateBindGroup(t.CreateBindGroupEntries([{buffer:l},{buffer:u},{buffer:o}]),v)),s=requestAnimationFrame(G)}function G(r){if(s=requestAnimationFrame(G),r-p<O)return;const a=t.CreateCommandEncoder();t.SetBindGroups(f[g%2]),t.Compute(I),e.SetCommandEncoder(a),e.SetBindGroups(f[++g%2]),h.colorAttachments[0].view=n.CurrentTextureView,e.Render(h,w,[L,d]),p=r}x=new ResizeObserver(r=>{for(const a of r){const{inlineSize:S,blockSize:C}=a.contentBoxSize[0];n.SetCanvasSize(S,C)}M(),_()}),x.observe(b)}function z(){n.OnDeviceLost=()=>{},cancelAnimationFrame(s),x.disconnect(),n.Destroy()}export{z as destroy,N as run};
