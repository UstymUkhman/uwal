import{D as p}from"./index-LluyWnED.js";import{Q as C}from"./Quad-VFYOTGYq.js";var R="@group(0)@binding(0)var<uniform>resolution: vec3f;fn GetClipSpace(position: vec2f)->vec2f{let clipSpace=position/resolution.xy*2-1;return clipSpace*vec2f(1,-1);}";const _=""+new URL("matrix-Bz2rpV2j.mp4",import.meta.url).href;var G="const ONE_THIRD=1.0/3.0;const RED_BRIGHTNESS=1.2;const BRIGHTNESS=-0.025;const CONTRAST=2.0;struct VertexOutput{@location(0)coord: vec2f,@builtin(position)position: vec4f};@group(0)@binding(3)var Sampler: sampler;@group(0)@binding(1)var<uniform>dpr: f32;@group(0)@binding(2)var<uniform>size: vec2f;@group(0)@binding(4)var Texture: texture_external;@vertex fn vertex(@builtin(vertex_index)index: u32)->VertexOutput {let max=ONE_THIRD*2;var output: VertexOutput;var coord=GetQuadCoord(index);let scale=vec2f(min(resolution.x/size.x,max))*size/resolution.xy;let position=coord*scale*dpr-vec2f(0,scale.y);output.position=vec4f(position,0,1);coord=(coord+1.0)*0.5;coord.y=1.0-coord.y;output.coord=coord;return output;}@fragment fn fragment(@location(0)coord: vec2f)->@location(0)vec4f {var color=textureSampleBaseClampToEdge(Texture,Sampler,coord).rgb;color=pow(color,vec3f(0.45));var average=dot(color,vec3f(ONE_THIRD));let weight=smoothstep(0.1,0.25,color.r-average);average=(average-0.5+BRIGHTNESS)*CONTRAST+0.5;color=mix(vec3f(average),vec3f(RED_BRIGHTNESS,0.5,0.5)*color,weight);return vec4f(pow(color,vec3f(2.2)),1);}";/**
 * @example Video Color Grading
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is developed by using a version listed below.
 * Please note that this code may be simplified in future
 * thanks to more recent library APIs.
 * @version 0.0.6
 * @license MIT
 */let u,d,f;const v=new Float32Array([1]);let h;const e=document.createElement("video");let t;async function D(s){try{t=new(await p.RenderPipeline(s,"Video Color Grading"))}catch(o){alert(o)}const g=new(await p.Texture()),E=g.CreateSampler();let c,l,x;e.playsinline=e.loop=!0,e.controls=e.muted=!0,e.style.position="absolute",e.preload="auto",e.src=_,t.CreatePipeline({module:t.CreateShaderModule([C,R,G])}),f=t.CreateBuffer({size:Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),t.CreatePassDescriptor(t.CreateColorAttachment()),e.addEventListener("loadedmetadata",()=>{l=e.videoHeight,c=e.videoWidth,y()},!1),document.body.appendChild(e);function y(){const o=s.width/e.videoWidth,{offsetWidth:i,offsetHeight:r}=document.body,m=Math.min(o,1/3*2)*(1/o);if(i<=960){const n=i*m,a=l*n/c;e.style.left=`${(i-n)/2}px`,e.style.top=`${r/2-a}px`,e.style.height=`${a}px`,e.style.width=`${n}px`,e.style.bottom="unset",e.style.right="unset",e.height=a,e.width=n,v[0]=1}else{const n=Math.min(s.clientWidth/c,.67),a=c*n,B=l*n;e.style.right=`${(s.clientWidth-a)/2}px`,e.style.bottom=`${s.clientHeight/2}px`,e.style.height=`${B}px`,e.style.width=`${a}px`,v[0]=devicePixelRatio,e.style.left="unset",e.style.top="unset",e.height=B,e.width=a}}async function T(){await b(),w(),u=requestAnimationFrame(S)}function b(){return new Promise((o,i)=>{if(e.addEventListener("error",i),"requestVideoFrameCallback"in e)e.requestVideoFrameCallback(o);else{const r=()=>e.currentTime?o():requestAnimationFrame(r);r()}e.play().catch(i)})}function w(){const o=new Float32Array([e.videoWidth,e.videoHeight]);d=t.CreateBuffer({usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,size:Float32Array.BYTES_PER_ELEMENT*2}),t.WriteBuffer(d,o),t.WriteBuffer(f,v)}function S(){u=requestAnimationFrame(S);const o=g.ImportExternalTexture(e);t.SetBindGroups(t.CreateBindGroup(t.CreateBindGroupEntries([{buffer:x},{buffer:f},{buffer:d},E,o]))),t.Render(6)}h=new ResizeObserver(o=>{for(const i of o){let{inlineSize:r,blockSize:m}=i.contentBoxSize[0];r=r<=960&&r||r-240,t.SetCanvasSize(r,m),x=t.ResolutionBuffer}c&&l&&y(),cancelAnimationFrame(u),T()}),h.observe(document.body)}function F(){p.OnDeviceLost=()=>{},cancelAnimationFrame(u),h.disconnect(),t.Destroy(),e.remove(),p.Destroy([d,f])}export{F as destroy,D as run};
