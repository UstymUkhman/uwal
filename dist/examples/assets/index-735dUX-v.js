import{D as g}from"./index-xJ8VogwN.js";var D="struct VertexOutput{@location(0)cell: vec2f,@builtin(position)position: vec4f};@group(0)@binding(0)var<uniform>grid: vec2f;@group(0)@binding(1)var<storage>state: array<u32>;@vertex fn vertex(@location(0)position: vec2f,@builtin(instance_index)instance: u32)->VertexOutput{let fInstance=f32(instance);let state=f32(state[instance]);let cell=vec2f(fInstance % grid.x,floor(fInstance/grid.x));var output: VertexOutput;output.position=vec4f((position*state+1)/grid-1+cell/grid*2,0,1);output.cell=cell;return output;}@fragment fn fragment(@location(0)cell: vec2f)->@location(0)vec4f {let rg=cell/grid;return vec4f(rg,1-rg.g,1);}",M="@group(0)@binding(0)var<uniform>grid: vec2f;@group(0)@binding(1)var<storage>cellStateIn: array<u32>;@group(0)@binding(2)var<storage,read_write>cellStateOut: array<u32>;fn cellIndex(cell: vec2u)->u32{return(cell.x % u32(grid.x))+(cell.y % u32(grid.y))*u32(grid.x);}fn cellActive(x: u32,y: u32)->u32{return cellStateIn[cellIndex(vec2(x,y))];}@compute @workgroup_size(8,8)fn compute(@builtin(global_invocation_id)cell: vec3u){let activeNeighbors=cellActive(cell.x+1,cell.y+1)+cellActive(cell.x+1,cell.y)+cellActive(cell.x+1,cell.y-1)+cellActive(cell.x,cell.y-1)+cellActive(cell.x-1,cell.y-1)+cellActive(cell.x-1,cell.y)+cellActive(cell.x-1,cell.y+1)+cellActive(cell.x,cell.y+1);let i=cellIndex(cell.xy);switch activeNeighbors{case 2:{cellStateOut[i]=cellStateIn[i];}case 3:{cellStateOut[i]=1;}default:{cellStateOut[i]=0;}}}";/**
 * @example Game Of Life
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is inspired by Google Codelabs "Your first WebGPU app"
 * {@link https://codelabs.developers.google.com/your-first-webgpu-app}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.4
 * @license MIT
 */let s,h,d,l,o,u,e,t;async function V(U){try{e=new(await g.RenderPipeline(U,"Game Of Life Render")),t=new(await g.ComputePipeline("Game Of Life Compute"))}catch(r){alert(r)}const f=[],B=8,p=250;let v,y=0,S=performance.now()-p;const O=e.CreatePassDescriptor(e.CreateColorAttachment(void 0,"clear","store",[0,0,.4,1])),C=t.CreateBindGroupLayout([{buffer:{type:"uniform"},visibility:GPUShaderStage.COMPUTE|GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT},{buffer:{type:"read-only-storage"},visibility:GPUShaderStage.COMPUTE|GPUShaderStage.VERTEX},{buffer:{type:"storage"},visibility:GPUShaderStage.COMPUTE}]),G=e.CreateShaderModule(D),E=e.CreateFragmentState(G),R=e.CreateVertexState(G,"vertex",{attributes:[e.CreateVertexBufferAttribute("float32x2")],arrayStride:8}),P=t.CreatePipelineLayout(C),w=t.CreateShaderModule(M);e.CreatePipeline({layout:P,vertex:R,fragment:E}),t.CreatePipeline({layout:P,module:w});const m=new Float32Array([-.8,-.8,.8,-.8,.8,.8,.8,.8,-.8,.8,-.8,-.8]),T=m.length/2;d=e.CreateBuffer({size:m.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),e.WriteBuffer(d,m),e.SetVertexBuffers(d);function I(){cancelAnimationFrame(s),f.splice(y=0),S=performance.now()-p,[l,o,u].forEach(r=>r==null?void 0:r.destroy())}function _(r=48){const a=e.AspectRatio,{width:n,height:x}=e.Canvas,i=n<x?new Float32Array([r,Math.round(r/a)]):new Float32Array([Math.round(r*a),r]);l=e.CreateBuffer({size:i.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),e.WriteBuffer(l,i),v=i[0]*i[1];const c=new Uint32Array(v);o=t.CreateBuffer({size:c.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),u=t.CreateBuffer({size:c.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});for(let b=0;b<c.length;b++)c[b]=+(Math.random()>.6);t.WriteBuffer(o,c),t.Workgroups=[Math.ceil(i[0]/B),Math.ceil(i[1]/B)],f.push(t.CreateBindGroup(t.CreateBindGroupEntries([{buffer:l},{buffer:o},{buffer:u}]),C),t.CreateBindGroup(t.CreateBindGroupEntries([{buffer:l},{buffer:u},{buffer:o}]),C)),s=requestAnimationFrame(A)}function A(r){if(s=requestAnimationFrame(A),r-S<p)return;const a=t.CreateCommandEncoder();t.SetBindGroups(f[y%2]),t.Compute(),e.SetCommandEncoder(a),e.SetBindGroups(f[++y%2]),O.colorAttachments[0].view=e.CurrentTextureView,e.Render([T,v]),S=r}h=new ResizeObserver(r=>{for(const a of r){let{inlineSize:n,blockSize:x}=a.contentBoxSize[0];n=n<=960&&n||n-240,e.SetCanvasSize(n,x)}I(),_()}),h.observe(document.body)}function F(){g.OnDeviceLost=()=>{},cancelAnimationFrame(s),h.disconnect(),t.Destroy(),e.Destroy(),g.Destroy([d,l,o,u])}export{F as destroy,V as run};
