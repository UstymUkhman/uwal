import{U as p,C as M,F as U}from"./index-Dlk0Bfe3.js";import{S as V,a as G}from"./Shape-B5XPSsSu.js";const N=""+new URL("logo-DEvozEyj.jpg",import.meta.url).href;var Y="struct VertexOutput{@location(0)textureCoord: vec2f,@builtin(position)position: vec4f,@location(1)@interpolate(flat)instance: u32};@group(1)@binding(0)var Sampler: sampler;@group(1)@binding(1)var Texture: texture_2d<f32>;@group(1)@binding(2)var<storage,read>visible: array<u32>;@vertex fn mainVertex(@location(0)position: vec2f,@location(1)translation: vec2f,@builtin(instance_index)instance: u32)->VertexOutput{var output: VertexOutput;let aspect=resolution/resolution.y;let clipSpace=GetVertexClipSpace(position).xy;output.position=vec4f(clipSpace+translation,0,1);output.textureCoord=clipSpace*aspect*2.5+0.5;output.instance=instance;return output;}@fragment fn fragment(@location(0)textureCoord: vec2f,@location(1)@interpolate(flat)instance: u32)->@location(0)vec4f{if(visible[instance]==0){discard;}return textureSample(Texture,Sampler,textureCoord);}";/**
 * @example Texture Instancing
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is developed by using a version listed below.
 * Please note that this code may be simplified in future
 * thanks to more recent library APIs.
 * @version 0.0.5
 * @license MIT
 */let l,g;async function D(n){let t;try{t=new(await p.RenderPipeline(n,"Texture Instancing"))}catch(e){alert(e)}const d=128,s=100;let a,u,x,m,c,o=500,E=performance.now()-o;const S=t.CreateShaderModule([V,Y]),B=t.CreateColorAttachment();B.clearValue=new M(1651532).rgba,t.CreatePassDescriptor(B),t.CreatePipeline({fragment:t.CreateFragmentState(S),vertex:t.CreateVertexState(S,"mainVertex",[{arrayStride:Float32Array.BYTES_PER_ELEMENT*2,attributes:[t.CreateVertexBufferAttribute("float32x2")]},{stepMode:"instance",arrayStride:Float32Array.BYTES_PER_ELEMENT*2,attributes:[t.CreateVertexBufferAttribute("float32x2",1)]}])});function h(){cancelAnimationFrame(l),clearTimeout(m),E=performance.now()-o}async function P(){R(),v(),b(),await w(),requestAnimationFrame(C),m=setTimeout(()=>o=~(c=-1),o*3)}function R(){const e=new G({renderer:t,segments:4,radius:d});e.Position=[n.width/2,n.height/2],e.Rotation=Math.PI/4,x=e.Update().Vertices}function v(){const e=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,r=Uint32Array.BYTES_PER_ELEMENT*s;a=new Uint32Array(r/Uint32Array.BYTES_PER_ELEMENT),u=t.CreateBuffer({size:r,usage:e}),t.WriteBuffer(u,a)}function b(){const e=1-Math.sqrt(2)*d/n.height,r=1-Math.sqrt(2)*d/n.width,i=Float32Array.BYTES_PER_ELEMENT*2,f=i*s,F=GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,A=t.CreateBuffer({size:f,usage:F}),L=i/Float32Array.BYTES_PER_ELEMENT,y=new Float32Array(f/Float32Array.BYTES_PER_ELEMENT);for(let _=s;_--;)y.set([T(-r,r),T(-e,e)],L*_);t.WriteBuffer(A,y),t.AddVertexBuffers(A)}async function w(){const e=new(await p.Texture()),r=await e.CreateBitmapImage(await(await fetch(N)).blob(),{colorSpaceConversion:"none"}),i=e.CopyImageToTexture(r,{flipY:!0,create:{usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,format:"rgba8unorm",mipmaps:!1}});t.AddBindGroups(t.CreateBindGroup(t.CreateBindGroupEntries([e.CreateSampler({magFilter:U.LINEAR,minFilter:U.LINEAR}),i.createView(),{buffer:u}]),1))}function T(e,r){return e===void 0?(e=0,r=1):r===void 0&&(r=e,e=0),Math.random()*(r-e)+e}function C(e){l=requestAnimationFrame(C),!(e-E<o)&&(o?a.fill(0)&&(c=T(a.length)|0):++c===a.length-1&&cancelAnimationFrame(l),E=e,a[c]=1,t.WriteBuffer(u,a),t.Render([x,s]))}g=new ResizeObserver(e=>{for(const r of e){const{inlineSize:i,blockSize:f}=r.contentBoxSize[0];t.SetCanvasSize(i,f)}h(),P()}),g.observe(n)}function z(){p.OnDeviceLost=()=>{},cancelAnimationFrame(l),g.disconnect(),p.Destroy()}export{z as destroy,D as run};
