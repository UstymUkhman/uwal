import{m as s,v as h,b as l}from"./index-jg0arK8r.js";class f{Children=[];Label;#i=null;RotationOrder="XYZ";TransformationOrder="TRS";ProjectionMatrix=s.identity();#t=s.identity();#s=s.identity();#r=h.set(1,1,1);#e=h.create();#o=h.create();constructor(t,i=null){this.Label=t,this.Parent=i}Add(t){t=l(t),t.forEach(i=>i.Parent=this)}Remove(t){t=l(t),t.forEach(i=>i.Parent=null)}Find(t){let i=null;return this.Traverse(r=>{if(r.Label===t)return i=r}),i}Traverse(t){if(!t(this))for(let i=0,r=this.Children.length;i<r;++i)this.Children[i].Traverse(t)}ResetLocalMatrix(){s.identity(this.#t)}UpdateWorldMatrix(){this.#a(),this.#i?s.multiply(this.#i.WorldMatrix,this.#t,this.#s):s.copy(this.#t,this.#s),this.Children.forEach(t=>t.UpdateWorldMatrix())}#a(){s.identity(this.#t);const t=this.TransformationOrder.split("");for(let i=0,r=t.length;i<r;i++)switch(t[i]){case"T":s.translate(this.#t,this.#e,this.#t);break;case"R":for(let e=0,o=this.RotationOrder.length;e<o;++e){const a=this.RotationOrder[e],n=this.#o[a.charCodeAt()-88];s[`rotate${a}`](this.#t,n,this.#t)}break;case"S":s.scale(this.#t,this.#r,this.#t);break}}UpdateProjectionMatrix(t){const i=this.#i&&this.#s||this.#t;return s.multiply(t,i,this.ProjectionMatrix)}ResetProjectionMatrix(){s.identity(this.ProjectionMatrix)}RotateAxis(t,i){s.rotate(this.#t,t,i,this.#t)}RotateX(t){s.rotateX(this.#t,t,this.#t)}RotateY(t){s.rotateY(this.#t,t,this.#t)}RotateZ(t){s.rotateZ(this.#t,t,this.#t)}Scale(t){s.scale(this.#t,t,this.#t)}set Transform(t){s.identity(this.#t);const[i,r,e]=t,o=this.TransformationOrder.split("");for(let a=0,n=o.length;a<n;a++)switch(o[a]){case"T":i&&(this.Position=i);break;case"R":r&&(this.Rotation=r);break;case"S":e&&(this.Scaling=e);break}}set Position(t){h.copy(t,this.#e),s.translate(this.#t,t,this.#t)}get Position(){return this.#e}set Rotation(t){h.copy(t,this.#o);for(let i=0,r=this.RotationOrder.length;i<r;++i){const e=this.RotationOrder[i],o=t[e.charCodeAt()-88];s[`rotate${e}`](this.#t,o,this.#t)}}get Rotation(){return this.#o}set Scaling(t){h.copy(t,this.#r),s.scale(this.#t,t,this.#t)}get Scaling(){return this.#r}get LocalMatrix(){return this.#t}get WorldMatrix(){return this.#s}set Parent(t){if(this.#i){const i=this.#i.Children.indexOf(this);0<=i&&this.#i.Children.splice(i,1)}t&&t.Children.push(this),this.#i=t}get Parent(){return this.#i}}export{f as N};
