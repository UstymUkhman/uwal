import{D as p,C as M}from"./index-qOH1w7rj.js";var _="@group(0)@binding(0)var<uniform>grid: vec2f;@group(0)@binding(1)var<storage>cellStateIn: array<u32>;@group(0)@binding(2)var<storage,read_write>cellStateOut: array<u32>;fn cellIndex(cell: vec2u)->u32{return(cell.x % u32(grid.x))+(cell.y % u32(grid.y))*u32(grid.x);}fn cellActive(x: u32,y: u32)->u32{return cellStateIn[cellIndex(vec2(x,y))];}@compute @workgroup_size(8,8)fn compute(@builtin(global_invocation_id)cell: vec3u){let activeNeighbors=cellActive(cell.x+1,cell.y+1)+cellActive(cell.x+1,cell.y)+cellActive(cell.x+1,cell.y-1)+cellActive(cell.x,cell.y-1)+cellActive(cell.x-1,cell.y-1)+cellActive(cell.x-1,cell.y)+cellActive(cell.x-1,cell.y+1)+cellActive(cell.x,cell.y+1);let i=cellIndex(cell.xy);switch activeNeighbors{case 2:{cellStateOut[i]=cellStateIn[i];}case 3:{cellStateOut[i]=1;}default:{cellStateOut[i]=0;}}}",V="struct VertexOutput{@location(0)cell: vec2f,@builtin(position)position: vec4f};@group(0)@binding(0)var<uniform>grid: vec2f;@group(0)@binding(1)var<storage>state: array<u32>;@vertex fn vertex(@location(0)position: vec2f,@builtin(instance_index)instance: u32)->VertexOutput{let fInstance=f32(instance);let state=f32(state[instance]);let cell=vec2f(fInstance % grid.x,floor(fInstance/grid.x));var output: VertexOutput;output.position=vec4f((position*state+1)/grid-1+cell/grid*2,0,1);output.cell=cell;return output;}@fragment fn fragment(@location(0)cell: vec2f)->@location(0)vec4f {let rg=cell/grid;return vec4f(rg,1-rg.g,1);}";/**
 * @example Game Of Life
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is inspired by Google Codelabs "Your first WebGPU app"
 * {@link https://codelabs.developers.google.com/your-first-webgpu-app}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.2.0
 * @license MIT
 */let d,n,a,S;const C=[];async function F(P){try{n=new(await p.Renderer(P,"Game Of Life Renderer")),a=new(await p.Computation("Game Of Life Computation"))}catch(t){alert(t)}const r=new n.Pipeline,e=new a.Pipeline,B=8,g=200;let b=0,v=performance.now()-g;const h=GPUShaderStage.COMPUTE|GPUShaderStage.VERTEX;n.CreatePassDescriptor(n.CreateColorAttachment(new M(102)));const A=e.CreatePipelineLayout(e.CreateBindGroupLayout([a.CreateBufferBindingLayout("uniform",!1,0,h|GPUShaderStage.FRAGMENT),a.CreateBufferBindingLayout("read-only-storage",!1,0,h),a.CreateBufferBindingLayout("storage")])),w=r.CreateShaderModule(V);await a.AddPipeline(e,{layout:A,module:e.CreateShaderModule(_)});const{layout:I,buffer:G}=r.CreateVertexBuffer("position",6);await n.AddPipeline(r,{layout:A,fragment:r.CreateFragmentState(w),vertex:r.CreateVertexState(w,I)}),r.WriteBuffer(G,new Float32Array([-.8,-.8,.8,-.8,.8,.8,.8,.8,-.8,.8,-.8,-.8])),r.SetVertexBuffers(G);function E(){cancelAnimationFrame(d),C.forEach(t=>t?.destroy()),v=performance.now()-g}function L(t=48){const i=n.AspectRatio,[l,m]=n.CanvasSize,{grid:o,buffer:c}=r.CreateUniformBuffer("grid");o.set(l<m?[t,Math.round(t/i)]:[Math.round(t*i),t]);const x=o[0]*o[1];r.WriteBuffer(c,o);const{cellStateIn:u,buffer:f}=e.CreateStorageBuffer("cellStateIn",x),{buffer:s}=e.CreateStorageBuffer("cellStateOut",x);for(let y=0;y<u.length;y++)u[y]=+(Math.random()>.6);e.WriteBuffer(s,u),e.WriteBuffer(f,u),C.push(c,f,s),a.Workgroups=[Math.ceil(o[0]/B),Math.ceil(o[1]/B)];const R=[e.CreateBindGroup(e.CreateBindGroupEntries([c,f,s])),e.CreateBindGroup(e.CreateBindGroupEntries([c,s,f]))];e.SetBindGroups(R),r.SetBindGroups(R),r.SetDrawParams(6,x),d=requestAnimationFrame(O)}function O(t){if(d=requestAnimationFrame(O),t-v<g)return;const i=a.CreateCommandEncoder();e.SetActiveBindGroups(b%2),a.Compute(!1),n.CommandEncoder=i,r.SetActiveBindGroups(++b%2),n.Render(),v=t}S=new ResizeObserver(t=>{for(const i of t){let{inlineSize:l,blockSize:m}=i.contentBoxSize[0];l=l<=960&&l||l-240,n.SetCanvasSize(l,m)}E(),L()}),S.observe(document.body)}function U(){p.OnLost=()=>{},cancelAnimationFrame(d),a.Destroy(),S.disconnect(),n.Destroy(),p.Destroy(C)}export{U as destroy,F as run};
