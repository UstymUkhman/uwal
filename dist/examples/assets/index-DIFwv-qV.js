import{U as n}from"./index-oaqckAdJ.js";import{Q as S}from"./Quad-VFYOTGYq.js";var x="struct Screen{color: vec3f,time: f32};struct VertexOutput{@location(0)coord: vec2f,@builtin(position)position: vec4f};@group(0)@binding(0)var<uniform>screen: Screen;@vertex fn vertex(@builtin(vertex_index)index: u32)->VertexOutput {var output: VertexOutput;let coord=GetQuadCoord(index);output.position=vec4f(coord,0,1);output.coord=coord;return output;}@fragment fn fragment(@location(0)coord: vec2f)->@location(0)vec4f {return vec4f(cos(coord.xyx+screen.time)*0.2+screen.color+0.4,1);}";/**
 * @example Screen Shader
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This example is inspired by OGL's "Triangle Screen Shader"
 * {@link https://oframe.github.io/ogl/examples/?src=triangle-screen-shader.html}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.4
 * @license MIT
 */let t,i;async function B(a){let e;try{e=new(await n.RenderPipeline(a,"Screen Shader"))}catch(r){alert(r)}const d=e.CreatePassDescriptor(e.CreateColorAttachment()),c=e.CreateShaderModule([S,x]);e.CreatePipeline({vertex:e.CreateVertexState(c),fragment:e.CreateFragmentState(c)});const u=Float32Array.BYTES_PER_ELEMENT+Float32Array.BYTES_PER_ELEMENT*3,s=e.CreateBuffer({size:u,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),l=e.CreateBindGroup(e.CreateBindGroupEntries({buffer:s}));e.SetBindGroups(l);const o=new Float32Array(u/Float32Array.BYTES_PER_ELEMENT);o.set([0,.3515625,.609375]);function f(r){t=requestAnimationFrame(f),o.set([r*.001],3),d.colorAttachments[0].view=e.CurrentTextureView,e.WriteBuffer(s,o),e.Render(6)}i=new ResizeObserver(r=>{for(const m of r){const{inlineSize:p,blockSize:v}=m.contentBoxSize[0];e.SetCanvasSize(p,v)}cancelAnimationFrame(t),t=requestAnimationFrame(f)}),i.observe(a)}function A(){n.OnDeviceLost=()=>{},cancelAnimationFrame(t),i.disconnect(),n.Destroy()}export{A as destroy,B as run};
