import{D as g,U as c,a as i}from"./index-BLf8dJ29.js";import{C as T}from"./Cube-Di4jzhQv.js";import{P as w}from"./PerspectiveCamera-BY8F8tzl.js";const B=""+new URL("noodles-ZuJaTmne.jpg",import.meta.url).href;var V="struct VertexOutput{@location(0)textureCoord: vec2f,@builtin(position)position: vec4f};@group(0)@binding(0)var Sampler: sampler;@group(0)@binding(1)var Texture: texture_2d<f32>;@group(0)@binding(2)var<uniform>projection: mat4x4f;@vertex fn vertex(@location(1)textureCoord: vec2f,@location(0)position: vec4f)->VertexOutput{var output: VertexOutput;output.position=projection*position;output.textureCoord=textureCoord;return output;}@fragment fn fragment(@location(0)textureCoord: vec2f)->@location(0)vec4f {return textureSample(Texture,Sampler,textureCoord);}";/**
 * @module Texture Atlases
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Loading Images into Textures
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-importing-textures.html#texture-atlases}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.12
 * @license MIT
 */(async function(d){let e;d.style.backgroundColor="#000";try{e=new(await g.RenderPipeline(d,"Texture Atlases",{alphaMode:"premultiplied"}))}catch(t){alert(t)}const o={rotation:[c.DegreesToRadians(20),c.DegreesToRadians(25),c.DegreesToRadians(0)]},s={min:-360,max:360,step:1,converters:GUI.converters.radToDeg},u=new GUI().onChange(C),r=new T(e),a=new w(60,.1,10);a.Position=[0,1,5],a.LookAt([0,0,0]);const b=a.UpdateViewProjection(!1);u.add(o.rotation,"0",s).name("rotation.x"),u.add(o.rotation,"1",s).name("rotation.y"),u.add(o.rotation,"2",s).name("rotation.z");const n=new(await g.Texture(e)),p=await n.CreateBitmapImage(await(await fetch(B)).blob(),{colorSpaceConversion:"none"}),f=n.CreateTextureFromSource(p),l=e.CreateVertexBuffer(r.UV),m=e.CreateShaderModule(V);n.CopyImageToTexture(p,{texture:f}),e.WriteBuffer(l,r.UV),r.AddVertexBuffers(l),e.CreatePipeline({primitive:{cullMode:"back"},fragment:e.CreateFragmentState(m),depthStencil:e.CreateDepthStencilState(),vertex:e.CreateVertexState(m,void 0,[e.CreateVertexBufferLayout(r.PositionAttribute),e.CreateVertexBufferLayout("textureCoord")])}),e.CreatePassDescriptor(e.CreateColorAttachment(),void 0,e.CreateDepthAttachment()),e.SetBindGroups(e.CreateBindGroup(e.CreateBindGroupEntries([n.CreateSampler({filter:"linear"}),f.createView(),{buffer:r.TransformBuffer}])));function C(){const t=r.Transform;i.copy(b,t),i.rotateX(t,o.rotation[0],t),i.rotateY(t,o.rotation[1],t),i.rotateZ(t,o.rotation[2],t),r.Render()}new ResizeObserver(t=>{for(const S of t){const{inlineSize:x,blockSize:v}=S.contentBoxSize[0];e.SetCanvasSize(x,v),a.AspectRatio=x/v}C()}).observe(document.body)})(document.getElementById("lesson"));
