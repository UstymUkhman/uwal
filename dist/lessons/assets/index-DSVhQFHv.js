import{U as A,A as P,F as u}from"./index-DUOumvAP.js";import{v as F,m as n}from"./wgpu-matrix.module-D3z0rCw6.js";import{F as V}from"./f-CdSZvatx.js";import{Q as w,C as O}from"./Quad-C4zpvK4p.js";const D=""+new URL("granite-Bhx_bMIh.jpeg",import.meta.url).href;var z="struct Transform{matrix: mat4x4f};struct VertexOutput{@builtin(position)position: vec4f,@location(0)textureCoord: vec2f};@group(0)@binding(0)var Sampler: sampler;@group(0)@binding(1)var Texture: texture_2d<f32>;@group(0)@binding(2)var<uniform>transform: Transform;@vertex fn vertex(@builtin(vertex_index)index: u32)->VertexOutput {var output: VertexOutput;var position=GetQuadCoord(index);position=(position+1)*0.5;output.position=transform.matrix*vec4f(position,0.0,1.0);output.textureCoord=position*vec2f(1,50);return output;}@fragment fn fragment(@location(0)textureCoord: vec2f)->@location(0)vec4f {return textureSample(Texture,Sampler,textureCoord);}",j="struct VertexOutput{@builtin(position)position: vec4f,@location(0)textureCoord: vec2f};@group(0)@binding(0)var Sampler: sampler;@group(0)@binding(1)var Texture: texture_2d<f32>;@vertex fn vertex(@builtin(vertex_index)index: u32)->VertexOutput {let position=GetQuadCoord(index);let coord=(position+1)*0.5;var output: VertexOutput;output.position=vec4f(position,0.0,1.0);output.textureCoord=vec2f(coord.x,1-coord.y);return output;}@fragment fn fragment(@location(0)textureCoord: vec2f)->@location(0)vec4f {return textureSample(Texture,Sampler,textureCoord);}";const Y=""+new URL("coins-DSWNLmZu.jpg",import.meta.url).href;/**
 * @module GPU Mipmaps
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Loading Images into Textures
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-importing-textures.html#generating-mips-on-the-gpu}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.5
 * @license MIT
 */(async function(c){let t;try{t=new(await A.RenderPipeline(c,"GPU Mipmaps"))}catch(e){alert(e)}const B=(()=>{let e,a;return r=>{e||(e=t.CreateShaderModule([w,j]),a=p.CreateSampler({minFilter:u.LINEAR})),t.CreatePipeline({fragment:t.CreateFragmentState(e,"fragment",{format:r.format}),vertex:t.CreateVertexState(e)});let o=0,i=r.width,s=r.height;for(;1<i||1<s;)i=Math.max(i/2|0,1),s=Math.max(s/2|0,1),t.SetBindGroups(t.CreateBindGroup(t.CreateBindGroupEntries([a,r.createView({baseMipLevel:o++,mipLevelCount:1})]))),t.CreatePassDescriptor(t.CreateColorAttachment(r.createView({baseMipLevel:o,mipLevelCount:1}),"clear")),t.Render(6)}})(),G=async e=>await p.CreateBitmapImage(await(await fetch(e)).blob(),{colorSpaceConversion:"none"}),p=new(await A.Texture()),l=await Promise.all([d(V,{mipmaps:!0}),d(Y,{mipmaps:!0}),d(D,{mipmaps:!0})]);let m=0;const M=0,v=[],C=1,g=2e3,I=[0,1,0],U=[0,0,0],E=Math.PI*60/180,L=[0,0,2],S=F.set(1.2,.7),f=n.perspective(E,t.AspectRatio,C,g),T=n.inverse(n.lookAt(L,U,I)),h=n.multiply(f,T);t.CreatePipeline({module:t.CreateShaderModule([w,z])});const b=t.CreateColorAttachment();b.clearValue=new O(5000268).rgba,t.CreatePassDescriptor(b),t.ClearBindGroups();for(let e=0;e<8;e++){const a=p.CreateSampler({addressModeU:P.REPEAT,addressModeV:P.REPEAT,magFilter:e&1?u.LINEAR:u.NEAREST,minFilter:e&2?u.LINEAR:u.NEAREST,mipmapFilter:e&4?u.LINEAR:u.NEAREST}),r=16*Float32Array.BYTES_PER_ELEMENT,o=t.CreateBuffer({usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,size:r}),i=new Float32Array(r/Float32Array.BYTES_PER_ELEMENT),s=i.subarray(M,16);t.AddBindGroups(l.map(x=>t.CreateBindGroup(t.CreateBindGroupEntries([a,x.createView(),{buffer:o}])))),v.push({matrixBuffer:o,matrixValues:i,matrix:s})}function _(e,{mipmaps:a,flip:r}={}){const o=p.CopyImageToTexture(e,{flipY:r,create:{usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,format:"rgba8unorm",mipmaps:a}});return o.mipLevelCount>1&&B(o),o}async function d(e,a){const r=await G(e);return _(r,a)}function R(){v.forEach(({matrix:e,matrixBuffer:a,matrixValues:r},o)=>{const s=o%4-1.5,x=+(o<4)*2-1,y=o*l.length+m,N=[s*S[0],x*S[1],-50*.5];n.translate(h,N,e),n.rotateX(e,Math.PI*.5,e),n.scale(e,[1,50*2,1],e),n.translate(e,[-.5,-.5,0],e),t.WriteBuffer(a,r),t.SetActiveBindGroups(y),t.Render(6,!1)}),t.Submit()}new ResizeObserver(e=>{for(const a of e){const{inlineSize:r,blockSize:o}=a.contentBoxSize[0];t.SetCanvasSize(r,o)}n.perspective(E,t.AspectRatio,C,g,f),n.multiply(f,T,h),R()}).observe(c),c.addEventListener("click",()=>{m=(m+1)%l.length,R()})})(document.getElementById("lesson"));
