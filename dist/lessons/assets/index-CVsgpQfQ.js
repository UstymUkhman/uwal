import{c as G,a as N}from"./mipmaps-kMQ0t0FP.js";import{D as B,C as U,F as c,A as M,v as L,a}from"./index-BEuvW3M9.js";import{M as _}from"./MipmapFilter-nkAaR1eK.js";import{Q as z}from"./Quad-VFYOTGYq.js";/**
 * @module Mipmap Filter
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Textures
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-textures.html#mipmapfilter}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.5
 * @license MIT
 */(async function(E){let t;try{t=new(await B.RenderPipeline(E,"Mipmap Filter"))}catch(e){alert(e)}t.CreatePipeline({module:t.CreateShaderModule([z,_])});const m=t.CreateColorAttachment();m.clearValue=new U(5000268).rgba,t.CreatePassDescriptor(m);const u=new(await B.LegacyTexture());let d=0;const x=0,T=[],p=[P(G(),"Blended"),P(N(),"Checked")];for(let e=0;e<8;e++){const n=u.CreateSampler({addressModeU:M.REPEAT,addressModeV:M.REPEAT,magFilter:e&1?c.LINEAR:c.NEAREST,minFilter:e&2?c.LINEAR:c.NEAREST,mipmapFilter:e&4?c.LINEAR:c.NEAREST}),o=16*Float32Array.BYTES_PER_ELEMENT,r=t.CreateBuffer({usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,size:o}),s=new Float32Array(o/Float32Array.BYTES_PER_ELEMENT),i=s.subarray(x,16);t.AddBindGroups(p.map(l=>t.CreateBindGroup(t.CreateBindGroupEntries([n,l.createView(),{buffer:r}])))),T.push({matrixBuffer:r,matrixValues:s,matrix:i})}const R=1,h=2e3,b=[0,1,0],y=[0,0,0],A=60*Math.PI/180,I=[0,0,2],S=L.set(1.2,.7),f=a.perspective(A,t.AspectRatio,R,h),v=a.inverse(a.lookAt(I,y,b)),C=a.multiply(f,v);function P(e,n){const o=u.CreateTexture({usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,size:[e[0].width,e[0].height],mipLevelCount:e.length,label:`${n} Texture`,format:"rgba8unorm"});return e.forEach(({data:r,width:s,height:i},l)=>u.WriteTexture(r,{bytesPerRow:s*4,texture:o,mipLevel:l,width:s,height:i})),o}function g(){T.forEach(({matrix:e,matrixBuffer:n,matrixValues:o},r)=>{const i=r%4-1.5,l=+(r<4)*2-1,w=r*p.length+d,F=[i*S[0],l*S[1],-50*.5];a.translate(C,F,e),a.rotateX(e,.5*Math.PI,e),a.scale(e,[1,100,1],e),a.translate(e,[-.5,-.5,0],e),t.WriteBuffer(n,o),t.SetActiveBindGroups(w),t.Render(6,!1)}),t.Submit()}new ResizeObserver(e=>{for(const n of e){const{inlineSize:o,blockSize:r}=n.contentBoxSize[0];t.SetCanvasSize(o,r)}a.perspective(A,t.AspectRatio,R,h,f),a.multiply(f,v,C),g()}).observe(document.body),E.addEventListener("click",()=>{d=(d+1)%p.length,g()})})(document.getElementById("lesson"));
