import{D as J,a as V}from"./index-CWG6eoQD.js";import{M as K}from"./MatrixStack-CjTeTXWK.js";import{C as N,a as Q}from"./Cube-Uz7Qg183.js";import{P as X}from"./PerspectiveCamera-MopHud7N.js";/**
 * @module Matrix Stacks
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Matrix Stacks
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-matrix-stacks.html}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.1.0
 * @license MIT
 */(async function(C){let n;C.style.backgroundColor="#000";try{n=new(await J.Renderer(C,"Matrix Stacks",{alphaMode:"premultiplied"}))}catch(t){alert(t)}const D={min:-180,max:180,step:1,converters:GUI.converters.radToDeg},z=[.75,.75,.75,.75],[P,i,d]=[0,1,2],U=[.5,.5,.5,1],k=[1,1,1,1],a=[40,30,50],h=[10,2,2],S=4,p=[];let f=0;const M=5;V.create();const e=new K,w={baseRotation:0};new GUI().onChange(y).add(w,"baseRotation",D);const s=new X(60,1,2e3);s.Position=[0,15,250],s.LookAt([0,5,0]);const I=s.UpdateViewProjection(!1),T=[0,a[i]/3*2-a[i]/2,h[d]/2+a[d]/2],L=a[P]+10,B=a[i]+3,g=[a[P]+6,B*S+6,a[d]+4];n.CreatePassDescriptor(n.CreateColorAttachment(),n.CreateDepthStencilAttachment());const u=new Q,o=new n.Pipeline,v=o.CreateShaderModule(N),{layout:O,buffer:j}=o.CreateVertexBuffer({name:"color",format:"unorm8x4"},36);u.SetRenderPipeline(await n.AddPipeline(o,{primitive:{cullMode:"back"},fragment:o.CreateFragmentState(v),depthStencil:o.CreateDepthStencilState(),vertex:o.CreateVertexState(v,void 0,[u.GetPositionBufferLayout(o),O])}));const W=[200,200,70,90,130,110,70,200,210,160,160,220,200,70,120,80,70,200],x=u.UV.length/2,m=new Uint8Array(x*4);for(let t=0,r=0;t<x;r=(++t/4|0)*3){const c=W.slice(r,r+3);m.set(c,t*4),m[t*4+3]=255}o.WriteBuffer(j,m),u.AddVertexBuffers(j);function b(t,r){if(f===p.length){const{projection:q,buffer:A}=o.CreateUniformBuffer("projection"),{color:H,buffer:G}=o.CreateUniformBuffer("color");o.AddBindGroups(o.CreateBindGroup(o.CreateBindGroupEntries([G,A]))),p.push({projectionValue:q,projectionBuffer:A,colorValue:H,colorBuffer:G})}const{projectionValue:c,projectionBuffer:l,colorValue:R,colorBuffer:_}=p[f];R.set(r),o.WriteBuffer(_,R),V.multiply(I,t,c),o.WriteBuffer(l,c),o.SetActiveBindGroups(f++),n.Render(!1)}function E(){e.Push(),e.Scale(a),b(e.Get(),k),e.Pop(),e.Push(),e.Translate(T),e.Scale(h),b(e.Get(),U),e.Pop()}function F(){e.Push(),e.Scale(g),b(e.Get(),z),e.Pop();const t=g[i]/2-a[i]/2-5;for(let r=0;r<S;++r)e.Push(),e.Translate([0,r*B-t,3]),E(),e.Pop()}function Y(){for(let t=0,r=1;t<M;++t){if(e.Push(),t){const c=t%2*2-1,l=L*c*r;e.Translate([l,0,0]),r+=~-c/-2}F(),e.Pop()}}function y(){e.Push(),e.RotateY(w.baseRotation),f=0,Y(),e.Pop(),n.Submit()}new ResizeObserver(t=>{for(const r of t){const{inlineSize:c,blockSize:l}=r.contentBoxSize[0];n.SetCanvasSize(c,l),s.AspectRatio=n.AspectRatio,s.UpdateViewProjection(!1)}y()}).observe(document.body)})(document.getElementById("lesson"));
