import{D as g,U as c,a as i}from"./index-DkLC8RgG.js";import{P as T}from"./PerspectiveCamera-CaeyZ9dw.js";import{C as B}from"./Cube-DE902Bpq.js";const y=""+new URL("noodles-ZuJaTmne.jpg",import.meta.url).href;var h="struct VertexOutput{@location(0)textureCoord: vec2f,@builtin(position)position: vec4f};@group(0)@binding(0)var Sampler: sampler;@group(0)@binding(1)var Texture: texture_2d<f32>;@group(0)@binding(2)var<uniform>projection: mat4x4f;@vertex fn vertex(@location(1)textureCoord: vec2f,@location(0)position: vec4f)->VertexOutput{var output: VertexOutput;output.position=projection*position;output.textureCoord=textureCoord;return output;}@fragment fn fragment(@location(0)textureCoord: vec2f)->@location(0)vec4f {return textureSample(Texture,Sampler,textureCoord);}";const S=new Float32Array([.5,.5,.75,.5,.5,1,.75,1,.25,.5,.5,.5,.25,1,.5,1,0,0,0,.5,.25,0,.25,.5,.5,0,.5,.5,.75,0,.75,.5,0,.5,.25,.5,0,1,.25,1,.25,0,.5,0,.25,.5,.5,.5]);/**
 * @module Texture Atlases
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Loading Images into Textures
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-importing-textures.html#texture-atlases}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.12
 * @license MIT
 */(async function(p){let e;p.style.backgroundColor="#000";try{e=new(await g.RenderPipeline(p,"Texture Atlases",{alphaMode:"premultiplied"}))}catch(t){alert(t)}const r={rotation:[c.DegreesToRadians(20),c.DegreesToRadians(25),c.DegreesToRadians(0)]},s={min:-360,max:360,step:1,converters:GUI.converters.radToDeg},o=new T(60,.1,10);o.Position=[0,1,5],o.LookAt([0,0,0]);const b=o.UpdateViewProjection(!1),u=new GUI().onChange(x);u.add(r.rotation,"0",s).name("rotation.x"),u.add(r.rotation,"1",s).name("rotation.y"),u.add(r.rotation,"2",s).name("rotation.z");const a=new(await g.Texture(e)),d=await a.CreateBitmapImage(await(await fetch(y)).blob(),{colorSpaceConversion:"none"}),f=a.CreateTextureFromSource(d),l=e.CreateVertexBuffer(S),m=e.CreateShaderModule(h);a.CopyImageToTexture(d,{texture:f});const n=new B(e);e.WriteBuffer(l,S),n.AddVertexBuffers(l),e.CreatePipeline({primitive:{cullMode:"back"},fragment:e.CreateFragmentState(m),depthStencil:e.CreateDepthStencilState(),vertex:e.CreateVertexState(m,void 0,[e.CreateVertexBufferLayout({name:"position",format:"float32x3"}),e.CreateVertexBufferLayout("textureCoord")])}),e.CreatePassDescriptor(e.CreateColorAttachment(),void 0,e.CreateDepthAttachment()),e.SetBindGroups(e.CreateBindGroup(e.CreateBindGroupEntries([a.CreateSampler({filter:"linear"}),f.createView(),{buffer:n.TransformBuffer}])));function x(){const t=n.Transform;i.copy(b,t),i.rotateX(t,r.rotation[0],t),i.rotateY(t,r.rotation[1],t),i.rotateZ(t,r.rotation[2],t),n.Render()}new ResizeObserver(t=>{for(const w of t){const{inlineSize:C,blockSize:v}=w.contentBoxSize[0];e.SetCanvasSize(C,v),o.AspectRatio=C/v}x()}).observe(document.body)})(document.getElementById("lesson"));
