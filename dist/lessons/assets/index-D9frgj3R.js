import{U as a}from"./index-BEcPMtkb.js";var U="struct ConstStruct{color: vec4f,offset: vec2f};struct VarStruct{scale: vec2f};@group(0)@binding(0)var<uniform>constStruct: ConstStruct;@group(0)@binding(1)var<uniform>varStruct: VarStruct;@vertex fn vertex(@builtin(vertex_index)index: u32)->@builtin(position)vec4f {let position=array(vec2f(0.0,0.5),vec2f(-0.5,-0.5),vec2f(0.5,-0.5));return vec4f(position[index]*varStruct.scale+constStruct.offset,0.0,1.0);}@fragment fn fragment()->@location(0)vec4f {return constStruct.color;}";/**
 * @module Uniforms
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Uniforms
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-uniforms.html}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.3
 * @license MIT
 */(async function(i){let e;try{e=new(await a.RenderPipeline(i,"Triangle Uniforms"))}catch(r){alert(r)}const B=0,v=4,m=0,g=100,c=[],l=e.CreateRenderPassDescriptor(e.CreateColorAttachment(void 0,"clear","store",[.3,.3,.3,1])),E=e.CreateShaderModule(U),p=e.CreateRenderPipeline({vertex:e.CreateVertexState(E),fragment:e.CreateFragmentState(E)}),d=4*Float32Array.BYTES_PER_ELEMENT+2*Float32Array.BYTES_PER_ELEMENT+2*Float32Array.BYTES_PER_ELEMENT,S=2*Float32Array.BYTES_PER_ELEMENT;for(let r=0;r<g;++r){const t=e.CreateBuffer({label:`Triangle Uniforms Constant Buffer[${r}]`,size:d,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});{const s=new Float32Array(d/Float32Array.BYTES_PER_ELEMENT);s.set([n(),n(),n(),1],B),s.set([n(-.9,.9),n(-.9,.9)],v),e.WriteBuffer(t,s)}const o=new Float32Array(S/Float32Array.BYTES_PER_ELEMENT),f=e.CreateBuffer({label:`Triangle Uniforms Variable Buffer[${r}]`,size:S,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),u=e.CreateBindGroup(e.CreateBindGroupEntries([{buffer:t},{buffer:f}]));c.push({uniformBuffer:f,scale:n(.2,.5),uniformValues:o,bindGroup:u})}function n(r=0,t=1){return t===void 0&&(t=r,r=0),Math.random()*(t-r)+r}function C(){a.SetCanvasSize(i.width,i.height);const r=a.AspectRatio;l.colorAttachments[0].view=a.CurrentTextureView;for(const[t,{scale:o,bindGroup:f,uniformBuffer:u,uniformValues:s}]of c.entries())s.set([o/r,o],m),e.SetBindGroups(f),e.WriteBuffer(u,s),e.Render(l,p,3,t===c.length-1)}new ResizeObserver(r=>{for(const t of r){const{inlineSize:o,blockSize:f}=t.contentBoxSize[0];a.SetCanvasSize(o,f)}C()}).observe(i)})(document.getElementById("lesson"));
