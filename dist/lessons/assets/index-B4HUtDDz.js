import{addButtonLeftJustified as ve}from"https://webgpufundamentals.org/webgpu/resources/js/gui-helpers.js";import{a as u,b as l,D as ye,U as Be}from"./index-CWG6eoQD.js";import{C as Me,a as Pe}from"./Cube-Uz7Qg183.js";import{P as xe}from"./PerspectiveCamera-MopHud7N.js";class te{#o;#e=null;Children=[];Label="";#t=u.identity();#n=u.identity();constructor(t="",s){this.#o=s,this.Label=t}Add(t){t.Parent=this}Remove(t){t.Parent=null}UpdateWorldMatrix(t){this.#o?.GetMatrix(this.#t),t?u.multiply(t,this.#t,this.#n):u.copy(this.#t,this.#n),this.Children.forEach(s=>s.UpdateWorldMatrix(this.#n))}set Parent(t){if(this.#e){const s=this.#e.Children.indexOf(this);0<=s&&this.#e.Children.splice(s,1)}t&&t.Children.push(this),this.#e=t}get LocalMatrix(){return this.#t}get WorldMatrix(){return this.#n}get Transform(){return this.#o}}class oe{#o=l.create();#e=l.create();#t=l.create();#n="XYZ";constructor(t=l.zero(),s=l.zero(),h=l.set(1,1,1)){l.copy(t,this.#o),l.copy(s,this.#e),l.copy(h,this.#t)}#a(t,s=this.#n){for(let h=0;h<s.length;++h){const y=this.#e[s[h].charCodeAt()-88];u[`rotate${s[h]}`](t,y,t)}}GetMatrix(t){return u.translation(this.#o,t),this.#a(t),u.scale(t,this.#t,t),t}set Translation(t){l.copy(t,this.#o)}get Translation(){return this.#o}set Rotation(t){l.copy(t,this.#e)}get Rotation(){return this.#e}set Scale(t){l.copy(t,this.#t)}get Scale(){return this.#t}}/**
 * @module Scene Graphs
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Scene Graphs
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-scene-graphs.html}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.1.0
 * @license MIT
 */(async function(g){let t;g.style.backgroundColor="#000";try{t=new(await ye.Renderer(g,"Scene Graphs",{alphaMode:"premultiplied"}))}catch(e){alert(e)}const s={min:-90,max:90,step:1,converters:GUI.converters.radToDeg},h={min:-180,max:180,step:1,converters:GUI.converters.radToDeg},y=[.75,.75,.75,.75],[B,w,M]=[0,1,2],ne=[.5,.5,.5,1],ae=new Set([0,1,2]),re=[1,1,1,1],f=[40,30,50],W=[10,2,2],P=4,I=[];let L=!1;const x=[];let U,O,b=0;const A=5,G=[];let j,E=0;const a={cameraRotation:Be.DegreesToRadians(-45),animate:!1,showMeshNodes:!1,showAllTransforms:!1,translation:l.zero(),rotation:l.zero(),scale:l.create(1,1,1)};u.create();const R=new te("root"),p=new GUI().onChange(V);p.add(a,"cameraRotation",h),p.add(a,"animate").onChange(e=>d.enable(!e)),p.add(a,"showMeshNodes").onChange(Q),p.add(a,"showAllTransforms").onChange(K);const d=p.addFolder("Orientation");d.onChange(pe);const se=[d.add(a.translation,"0",-200,200,1).name("Translation X"),d.add(a.translation,"1",-200,200,1).name("Translation Y"),d.add(a.translation,"2",-200,200,1).name("Translation Z"),d.add(a.rotation,"0",s).name("Rotation X"),d.add(a.rotation,"1",s).name("Rotation Y"),d.add(a.rotation,"2",s).name("Rotation Z"),d.add(a.scale,"0",.1,100).name("Scale X"),d.add(a.scale,"1",.1,100).name("Scale Y"),d.add(a.scale,"2",.1,100).name("Scale Z")],ie=[0,f[w]/3*2-f[w]/2,W[M]/2+f[M]/2],F=f[B]+10,X=f[w]+3,D=[f[B]+6,X*P+6,f[M]+4],m=new xe(60,1,2e3);let Y=m.UpdateViewProjection();const ce=(D[B]+F)/2*(A-1)/2+4;t.CreatePassDescriptor(t.CreateColorAttachment(),t.CreateDepthStencilAttachment());const T=new Pe,i=new t.Pipeline,Z=i.CreateShaderModule(Me),le=(P*2+1)*A+1,{layout:de,buffer:k}=i.CreateVertexBuffer({name:"color",format:"unorm8x4"},36);T.SetRenderPipeline(await t.AddPipeline(i,{primitive:{cullMode:"back"},fragment:i.CreateFragmentState(Z),depthStencil:i.CreateDepthStencilState(),vertex:i.CreateVertexState(Z,void 0,[T.GetPositionBufferLayout(i),de])}));const fe=[200,200,70,90,130,110,70,200,210,160,160,220,200,70,120,80,70,200],q=T.UV.length/2,z=new Uint8Array(q*4),ue=(e,o,n)=>(o-e)*n+e;for(let e=0,o=0;e<q;o=(++e/4|0)*3){const n=fe.slice(o,o+3);z.set(n,e*4),z[e*4+3]=255}i.WriteBuffer(k,z),T.AddVertexBuffers(k);for(let e=0;e<A;++e)we(R,e);const he=p.addFolder("Nodes"),me=J(he,R);H(R.Children[0]),K(!1),Q(!1);function J(e,o,n,r){const c=[],C=r===void 0;if(o.Transform instanceof oe){const S=`${C?"":`${r} +-`}${o.Label}`;c.push(ve(e,S,()=>H(o)))}return r=C?"":`${r}${n?"   ":" | "}`,c.push(...o.Children.map((S,v)=>J(e,S,v===o.Children.length-1,r))),c.flat()}function pe(){const e=j.Transform;e.Translation.set(a.translation),e.Rotation.set(a.rotation),e.Scale.set(a.scale)}function _(){const e=j.Transform;a.translation.set(e.Translation),a.rotation.set(e.Rotation),a.scale.set(e.Scale),d.updateDisplay()}function H(e){j=e,d.name(`Orientation: ${e.Label}`),_()}function K(e){se.forEach((o,n)=>{o.show(e||ae.has(n))})}function Q(e){for(const o of me)o.domElement.textContent.includes("mesh")&&o.show(e)}function N(e,o,n){const r=new te(e,new oe(...n));return o&&(r.Parent=o),r}function $(e,o,n,r){const c=N(e,o,n),C=G.push({node:c,color:r});return G[C-1]}function Ce(e,o){const n=`drawer${o}`,r=D[w]/2-f[w]/2-5,c=N(n,e,[[0,X*o-r,3]]);I.push(c),$(`${n}-drawer-mesh`,c,[void 0,void 0,f],re),$(`${n}-handle-mesh`,c,[ie,void 0,W],ne)}function we(e,o){const n=`cabinet${o}`,r=N(n,e,[[o*F,0,0]]);$(`${n}-mesh`,r,[void 0,void 0,D],y);for(let c=0;c<P;++c)Ce(r,c)}function be(e,o){if(b===x.length){const{projection:S,buffer:v}=i.CreateUniformBuffer("projection"),{color:Te,buffer:ee}=i.CreateUniformBuffer("color");i.AddBindGroups(i.CreateBindGroup(i.CreateBindGroupEntries([ee,v]))),x.push({projectionValue:S,projectionBuffer:v,colorValue:Te,colorBuffer:ee})}const{projectionValue:n,projectionBuffer:r,colorValue:c,colorBuffer:C}=x[b];c.set(o),i.WriteBuffer(C,c),u.multiply(Y,e,n),i.WriteBuffer(r,n),i.SetActiveBindGroups(b),b=++b%le,t.Render(!1)}function V(){U||(U=requestAnimationFrame(Re))}function Se(e){be(e.node.WorldMatrix,e.color)}function ge(){I.forEach((e,o)=>e.Transform.Translation[2]=ue(3,f[2]*.8,Math.sin(E+o)*.5+.5))}function Re(){U=void 0,m.ResetMatrix(),m.Translate([ce,20,0]),m.RotateY(a.cameraRotation),m.Translate([0,0,300]),Y=m.UpdateViewProjection(),R.UpdateWorldMatrix();for(const r of G)Se(r);t.Submit();const e=a.animate,o=performance.now()*.001,n=L&&o-O||0;O=o,e&&(E+=n),L=e,a.animate&&(ge(),_(),V())}new ResizeObserver(e=>{for(const o of e){const{inlineSize:n,blockSize:r}=o.contentBoxSize[0];t.SetCanvasSize(n,r),m.AspectRatio=t.AspectRatio,m.UpdateViewProjection()}V()}).observe(document.body)})(document.getElementById("lesson"));
