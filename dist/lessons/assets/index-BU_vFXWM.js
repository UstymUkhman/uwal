import{D as c,C as A,F as a,A as r}from"./index-CWG6eoQD.js";import{F as C}from"./f-CdSZvatx.js";import{Q as R}from"./Quad-VFYOTGYq.js";var v="struct VertexOutput{@builtin(position)position: vec4f,@location(0)textureCoord: vec2f};@group(0)@binding(0)var Sampler: sampler;@group(0)@binding(1)var Texture: texture_2d<f32>;@vertex fn vertex(@builtin(vertex_index)index: u32)->VertexOutput {var output: VertexOutput;var position=GetQuadCoord(index);position=(position+1)*0.5;output.position=vec4f(position,0.0,1.0);output.textureCoord=position;return output;}@fragment fn fragment(@location(0)textureCoord: vec2f)->@location(0)vec4f {return textureSample(Texture,Sampler,textureCoord);}";/**
 * @module Loading Images
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Loading Images into Textures
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-importing-textures.html}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.5
 * @license MIT
 */(async function(p){let t;try{t=new(await c.RenderPipeline(p,"Loading Images"))}catch(e){alert(e)}t.CreatePipeline({module:t.CreateShaderModule([R,v])});const d=t.CreateColorAttachment();d.clearValue=new A(5000268).rgba,t.CreatePassDescriptor(d);const o={addressModeU:r.REPEAT,addressModeV:r.REPEAT,magFilter:a.LINEAR},u=[r.REPEAT,r.CLAMP],l=[a.NEAREST,a.LINEAR],n=new GUI;n.add(o,"addressModeU",u),n.add(o,"addressModeV",u),n.add(o,"magFilter",l),Object.assign(n.domElement.style,{left:"15px",right:""});const m=async e=>await s.CreateBitmapImage(await(await fetch(e)).blob(),{colorSpaceConversion:"none"}),s=new(await c.LegacyTexture()),E=await m(C),g=s.CopyImageToTexture(E,{flipY:!0,create:{usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,format:"rgba8unorm",mipmaps:!1}});for(let e=0;e<8;e++){const i=s.CreateSampler({addressModeU:e&1?r.REPEAT:r.CLAMP,addressModeV:e&2?r.REPEAT:r.CLAMP,magFilter:e&4?a.LINEAR:a.NEAREST});t.AddBindGroups(t.CreateBindGroup(t.CreateBindGroupEntries([i,g.createView()])))}function x(){const e=+(o.addressModeU===r.REPEAT)*1+ +(o.addressModeV===r.REPEAT)*2+ +(o.magFilter===a.LINEAR)*4;t.SetActiveBindGroups(e),t.Render(6)}new ResizeObserver(e=>{for(const i of e){const{inlineSize:f,blockSize:T}=i.contentBoxSize[0];t.SetCanvasSize(f,T)}x()}).observe(document.body)})(document.getElementById("lesson"));
