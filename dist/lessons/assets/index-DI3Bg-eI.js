import{U as C}from"./index-7_ieeE14.js";var U="struct ConstStruct{color: vec4f,offset: vec2f};struct VarStruct{scale: vec2f};@group(0)@binding(0)var<uniform>constStruct: ConstStruct;@group(0)@binding(1)var<uniform>varStruct: VarStruct;@vertex fn vertex(@builtin(vertex_index)index: u32)->@builtin(position)vec4f {let position=array(vec2f(0.0,0.5),vec2f(-0.5,-0.5),vec2f(0.5,-0.5));return vec4f(position[index]*varStruct.scale+constStruct.offset,0.0,1.0);}@fragment fn fragment()->@location(0)vec4f {return constStruct.color;}";/**
 * @module Uniforms
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Uniforms
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-uniforms.html}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.4
 * @license MIT
 */(async function(s){let e;try{e=new(await C.RenderPipeline(s,"Triangle Uniforms"))}catch(r){alert(r)}const S=0,d=4,B=0,v=100,u=[],m=e.CreatePassDescriptor(e.CreateColorAttachment(void 0,"clear","store",[.3,.3,.3,1])),c=e.CreateShaderModule(U);e.CreatePipeline({vertex:e.CreateVertexState(c),fragment:e.CreateFragmentState(c)});const l=4*Float32Array.BYTES_PER_ELEMENT+2*Float32Array.BYTES_PER_ELEMENT+2*Float32Array.BYTES_PER_ELEMENT,E=2*Float32Array.BYTES_PER_ELEMENT;for(let r=0;r<v;++r){const t=e.CreateBuffer({label:`Triangle Uniforms Constant Buffer[${r}]`,size:l,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});{const i=new Float32Array(l/Float32Array.BYTES_PER_ELEMENT);i.set([o(),o(),o(),1],S),i.set([o(-.9,.9),o(-.9,.9)],d),e.WriteBuffer(t,i)}const f=new Float32Array(E/Float32Array.BYTES_PER_ELEMENT),n=e.CreateBuffer({label:`Triangle Uniforms Variable Buffer[${r}]`,size:E,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),a=e.CreateBindGroup(e.CreateBindGroupEntries([{buffer:t},{buffer:n}]));u.push({uniformBuffer:n,scale:o(.2,.5),uniformValues:f,bindGroup:a})}function o(r,t){return r===void 0?(r=0,t=1):t===void 0&&(t=r,r=0),Math.random()*(t-r)+r}function g(){e.SetCanvasSize(s.width,s.height);const r=e.AspectRatio;m.colorAttachments[0].view=e.CurrentTextureView;for(const{scale:t,bindGroup:f,uniformBuffer:n,uniformValues:a}of u.values())a.set([t/r,t],B),e.SetBindGroups(f),e.WriteBuffer(n,a),e.Render(3,!1);e.Submit()}new ResizeObserver(r=>{for(const t of r){const{inlineSize:f,blockSize:n}=t.contentBoxSize[0];e.SetCanvasSize(f,n)}g()}).observe(s)})(document.getElementById("lesson"));
