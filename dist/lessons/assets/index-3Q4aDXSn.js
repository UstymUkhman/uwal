import{U as P,A as n,F as a}from"./index-DWxnOMSU.js";import{g as b}from"./mipmaps-kMQ0t0FP.js";import{C as l,Q as L}from"./Quad-C4zpvK4p.js";var N="struct Transform{scale: vec2f,offset: vec2f};struct VertexOutput{@builtin(position)position: vec4f,@location(0)textureCoord: vec2f};@group(0)@binding(0)var Sampler: sampler;@group(0)@binding(1)var Texture: texture_2d<f32>;@group(0)@binding(2)var<uniform>transform: Transform;@vertex fn vertex(@builtin(vertex_index)index: u32)->VertexOutput {var output: VertexOutput;var position=GetQuadCoord(index);position=(position+1)*0.5;output.position=vec4f(position*transform.scale+transform.offset,0.0,1.0);output.textureCoord=position;return output;}@fragment fn fragment(@location(0)textureCoord: vec2f)->@location(0)vec4f {return textureSample(Texture,Sampler,textureCoord);}";/**
 * @module Textures
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Textures
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-textures.html}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.5
 * @license MIT
 */(async function(d){let r;try{r=new(await P.RenderPipeline(d,"Texture"))}catch(t){alert(t)}const S=r.CreatePassDescriptor(r.CreateColorAttachment(void 0,"clear","store",new l(5000268).rgba));r.CreatePipeline({module:r.CreateShaderModule([L,N])});const B=5,v=0,w=2,o={addressModeU:n.REPEAT,addressModeV:n.REPEAT,magFilter:a.LINEAR,minFilter:a.LINEAR,scale:1},A=[n.REPEAT,n.CLAMP],T=[a.NEAREST,a.LINEAR],u=new GUI;u.add(o,"addressModeU",A),u.add(o,"addressModeV",A),u.add(o,"magFilter",T),u.add(o,"minFilter",T),u.add(o,"scale",.5,6);const e=new l(16711680).RGBA,i=new l(16776960).RGBA,M=new l(255).RGBA,U=new Uint8Array([e,e,e,e,e,e,i,e,e,e,e,i,e,e,e,e,i,i,e,e,e,i,e,e,e,e,i,i,i,e,M,e,e,e,e].flat()),c=b(U,B),m=new(await P.Texture()),x=m.CreateTexture({usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,size:[c[0].width,c[0].height],mipLevelCount:c.length,format:"rgba8unorm"});c.forEach(({data:t,width:s,height:f},p)=>m.WriteTexture(t,{bytesPerRow:s*4,texture:x,mipLevel:p,width:s,height:f}));const R=2*Float32Array.BYTES_PER_ELEMENT+2*Float32Array.BYTES_PER_ELEMENT,g=r.CreateBuffer({size:R,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),E=new Float32Array(R/Float32Array.BYTES_PER_ELEMENT);for(let t=0;t<16;t++){const s=m.CreateSampler({addressModeU:t&1?n.REPEAT:n.CLAMP,addressModeV:t&2?n.REPEAT:n.CLAMP,magFilter:t&4?a.LINEAR:a.NEAREST,minFilter:t&8?a.LINEAR:a.NEAREST});r.AddBindGroups(r.CreateBindGroup(r.CreateBindGroupEntries([s,x.createView(),{buffer:g}])))}function F(t){const s=4/d.width*o.scale,f=4/d.height*o.scale;E.set([s,f],v),E.set([Math.sin(t*.25)*.8,-.8],w),r.WriteBuffer(g,E)}function C(t){S.colorAttachments[0].view=r.CurrentTextureView;const s=+(o.addressModeU===n.REPEAT)*1+ +(o.addressModeV===n.REPEAT)*2+ +(o.magFilter===a.LINEAR)*4+ +(o.minFilter===a.LINEAR)*8;r.SetActiveBindGroups(s),F(t*.001),r.Render(6),requestAnimationFrame(C)}new ResizeObserver(t=>{for(const s of t){const{inlineSize:f,blockSize:p}=s.contentBoxSize[0];r.SetCanvasSize(f/64|0,p/64|0)}requestAnimationFrame(C)}).observe(d),d.style.imageRendering="pixelated",d.style.imageRendering="crisp-edges"})(document.getElementById("lesson"));
