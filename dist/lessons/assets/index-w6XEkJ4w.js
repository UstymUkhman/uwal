import{c as n,d as I,G as st,T as Mt,E as f,e as l,a as Rt,b as ot,M as j,D as St}from"./index-D1cRF4Z-.js";import{addButtonLeftJustified as bt}from"https://webgpufundamentals.org/webgpu/resources/js/gui-helpers.js";import{C as At}from"./index-BZJ7yk0V.js";class z{Children=[];Label;#r=null;RotationOrder="XYZ";TransformationOrder="TRS";ProjectionMatrix=n.identity();#t=n.identity();#i=n.identity();#s=I.set(1,1,1);#o=I.create();#e=I.create();constructor(t,e=null){this.Label=t,this.Parent=e}Add(t){t=st(t),t.forEach(e=>e.Parent=this)}Remove(t){t=st(t),t.forEach(e=>e.Parent=null)}Find(t){if(this.Label===t)return this;for(const e=0,i=this.Children.length;e<i;e++){const r=this.Children[e].Find(t);if(r)return r}return null}ResetLocalMatrix(){this.#t=n.identity()}UpdateWorldMatrix(){this.#n(),this.#r?n.multiply(this.#r.WorldMatrix,this.#t,this.#i):n.copy(this.#t,this.#i),this.Children.forEach(t=>t.UpdateWorldMatrix())}#n(){const t=this.TransformationOrder.split("");for(let e=0,i=t.length;e<i;e++)switch(t[e]){case"T":n.translation(this.#o,this.#t);break;case"R":for(let r=0,u=this.RotationOrder.length;r<u;++r){const m=this.RotationOrder[r],g=this.#e[m.charCodeAt()-88];n[`rotate${m}`](this.#t,g,this.#t)}break;case"S":n.scale(this.#t,this.#s,this.#t);break}}UpdateProjectionMatrix(t){const e=this.#r&&this.#i||this.#t;return n.multiply(t,e,this.ProjectionMatrix)}ResetProjectionMatrix(){this.ProjectionMatrix=n.identity()}Translate(t){n.translate(this.#t,t,this.#t)}RotateAxis(t,e){n.rotate(this.#t,t,e,this.#t)}RotateX(t){n.rotateX(this.#t,t,this.#t)}RotateY(t){n.rotateY(this.#t,t,this.#t)}RotateZ(t){n.rotateZ(this.#t,t,this.#t)}Scale(t){n.scale(this.#t,t,this.#t)}set Transform(t){const[e,i,r]=t,u=this.TransformationOrder.split("");for(let m=0,g=u.length;m<g;m++)switch(u[m]){case"T":e&&(this.Position=e);break;case"R":i&&(this.Rotation=i);break;case"S":r&&(this.Scaling=r);break}}set Position(t){I.copy(t,this.#o),n.translation(t,this.#t)}get Position(){return this.#o}set Rotation(t){I.copy(t,this.#e);for(let e=0,i=this.RotationOrder.length;e<i;++e){const r=this.RotationOrder[e],u=t[r.charCodeAt()-88];n[`rotate${r}`](this.#t,u,this.#t)}}get Rotation(){return this.#e}set Scaling(t){I.copy(t,this.#s),n.scale(this.#t,t,this.#t)}get Scaling(){return this.#s}get LocalMatrix(){return this.#t}get WorldMatrix(){return this.#i}set Parent(t){if(this.#r){const e=this.#r.Children.indexOf(this);0<=e&&this.#r.Children.splice(e,1)}t&&t.Children.push(this),this.#r=t}get Parent(){return this.#r}}let Vt=class extends z{#r;Visible=!0;#t;#i;#s;#o=[];constructor(t,e,i="Mesh",r=null){super(i,r),this.#r=t,this.#s=e}SetRenderPipeline(t,e=!0){this.#t=t,this.#r.CreateBuffers(t),this.#s?.CreateColorBuffer(t),this.#e(e)}#e(t=!0,e){const{projection:i,buffer:r}=this.#t.CreateUniformBuffer("projection",{label:`${this.Label} Projection Buffer`,...e});this.ProjectionMatrix=n.identity(i),this.#i=r,t&&(this.#o=this.#t.SetBindGroupFromResources([r,this.#s?.ColorBuffer].filter(Boolean),0,0,`${this.Label} Bind Group`))}UpdateProjectionMatrix(t){const e=super.UpdateProjectionMatrix(t);this.#t.WriteBuffer(this.#i,e)}SetPipelineData(){!this.#t&&Mt(f.PIPELINE_NOT_FOUND,"RenderPipeline.\n            Call `Mesh.SetRenderPipeline` method before setting its data.");const{VertexBuffers:t,IndexBuffer:e,Vertices:i}=this.#r;this.#t.BindGroups=this.#o,this.#t.VertexBuffers=t,this.#t.IndexBuffer=e,this.#t.SetDrawParams(i)}get ProjectionBuffer(){return this.#i}get Geometry(){return this.#r}get Material(){return this.#s}Destroy(){this.#r.Destroy(),this.#s?.Destroy(),this.#t=void 0,this.#o.splice(0),this.#i.destroy(),this.#i=void 0}};class Bt extends z{#r=new Set;MainCamera;constructor(t="Scene"){super(t),Reflect.deleteProperty(this,"ProjectionMatrix")}AddCamera(t){super.Add(t),this.#r.add(t),this.#r.size===1&&(this.MainCamera=t)}RemoveCamera(t){super.Remove(t),this.#r.delete(t),this.MainCamera===t&&(this.MainCamera=void 0)}ResetLocalMatrix(){l(f.INVALID_CALL,"method: `Scene.ResetLocalMatrix`.")}UpdateProjectionMatrix(t){l(f.INVALID_CALL,"method: `Scene.UpdateProjectionMatrix`.")}ResetProjectionMatrix(){l(f.INVALID_CALL,"method: `Scene.ResetProjectionMatrix`.")}Translate(t){l(f.INVALID_CALL,"method: `Scene.Translate`.")}RotateAxis(t,e){l(f.INVALID_CALL,"method: `Scene.RotateAxis`.")}RotateX(t){l(f.INVALID_CALL,"method: `Scene.RotateX`.")}RotateY(t){l(f.INVALID_CALL,"method: `Scene.RotateY`.")}RotateZ(t){l(f.INVALID_CALL,"method: `Scene.RotateZ`.")}Rotate(t){l(f.INVALID_CALL,"method: `Scene.Rotate`.")}Scale(t){l(f.INVALID_CALL,"method: `Scene.Scale`.")}Destroy(){this.#r.clear(),this.Children.splice(0),this.MainCamera=void 0}set Transform(t){l(f.INVALID_CALL,"setter: `Scene.Transform`.")}set Position(t){l(f.INVALID_CALL,"setter: `Scene.Position`.")}get Position(){l(f.INVALID_CALL,"getter: `Scene.Position`.")}set Rotation(t){l(f.INVALID_CALL,"setter: `Scene.Rotation`.")}get Rotation(){l(f.INVALID_CALL,"getter: `Scene.Rotation`.")}set Scaling(t){l(f.INVALID_CALL,"setter: `Scene.Scaling`.")}get Scaling(){l(f.INVALID_CALL,"getter: `Scene.Scaling`.")}get LocalMatrix(){l(f.INVALID_CALL,"getter: `Scene.LocalMatrix`.")}}let Pt=class{#r;Label;IndexFormat;VertexBuffers;IndexBuffer;constructor(t="Mesh",e){this.IndexFormat=e,this.Label=t}CreateVertexBuffer(t,e,i=this.Label){const r=t.CreateVertexBuffer(e,{label:`${i} Vertex Buffer`});this.VertexBuffers=t.SetVertexBuffers(r),t.WriteBuffer(r,e)}CreateIndexBuffer(t,e,i=this.Label){const r=t.CreateIndexBuffer(e,{label:`${i} Index Buffer`});this.IndexBuffer=t.SetIndexBuffer(r,this.IndexFormat),t.SetDrawParams(this.#r=e.length),t.WriteBuffer(r,e)}get Vertices(){return this.#r}Destroy(){this.IndexBuffer?.buffer.destroy(),this.VertexBuffers?.[0].buffer.destroy()}};class It extends Pt{#r;#t;constructor(t="Cube"){super(t,"uint16")}GetPositionBufferLayout(t,e={name:"position",format:"float32x3"},i="vertex",r="vertex"){return t.CreateVertexBufferLayout(e,i,r)}CreateTextureCoordsBuffer(t,e,i="vertex",r="vertex"){!Array.isArray(e)&&e?.name,e??="textureCoords";const u=new Float32Array([.5,.5,.75,.5,.5,1,.75,1,.25,.5,.5,.5,.25,1,.5,1,0,0,0,.5,.25,0,.25,.5,.5,0,.5,.5,.75,0,.75,.5,0,.5,.25,.5,0,1,.25,1,.25,0,.5,0,.25,.5,.5,.5]);return this.AddVertexBuffer(t,u,e,i,r)}AddVertexBuffer(t,e,i,r="vertex",u="vertex"){const{buffer:m,layout:g}=t.CreateVertexBuffer(i,this.Vertices,r,u);return this.VertexBuffers=t.AddVertexBuffers(m),t.WriteBuffer(m,e),{buffer:m,layout:g}}#i(t,e=this.Label){super.CreateVertexBuffer(t,this.#t??new Float32Array([-.5,.5,.5,.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,.5,-.5,-.5,.5,.5,-.5,-.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,.5,.5,.5,-.5,.5,.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,.5,.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,-.5,.5]),e)}#s(t,e=this.Label){super.CreateIndexBuffer(t,this.#r??new Uint16Array([0,1,2,2,1,3,4,5,6,6,5,7,8,9,10,10,9,11,12,13,14,14,13,15,16,17,18,18,17,19,20,21,22,22,21,23]),e)}CreateBuffers(t,e=this.Label){this.#i(t,e),this.#s(t,e)}set VertexData(t){this.#t=t}set IndexData(t){this.#r=t}get Vertices(){return(this.#t&&this.#t.length/3)??this.#r?.length??super.Vertices??24}Destroy(){super.Destroy(),this.#r=void 0,this.#t=void 0}}class k{#r;#t;#i;#s;#o;constructor(t=16777215,e="Mesh"){this.Color=t,this.#r=e}CreateColorBuffer(t,e=this.#r){const{color:i,buffer:r}=t.CreateUniformBuffer("color",{label:`${e} Color Buffer`});this.#t=i,this.#i=t,this.#o=r,this.#t.set(this.#s),t.WriteBuffer(r,i)}get ColorBuffer(){return this.#o}set Color(t){this.#s=typeof t=="number"&&Rt(t)||t instanceof ot&&t.rgba||Object.values(t),this.#t?.fill(1).set(this.#s),this.#i?.WriteBuffer(this.#o,this.#t)}get Color(){return this.#s}Destroy(){this.#i=void 0,this.#o.destroy(),this.#o=void 0}}class yt extends z{#r=I.set(0,1,0);#t=60;#i=1;#s=1e3;#o=innerWidth/innerHeight;#e=new Float32Array(24);#n=n.identity();#a=n.identity();constructor(t=60,e=1,i=1e3,r=innerWidth/innerHeight){super("PerspectiveCamera"),this.#t=t,this.#i=e,this.#s=i,this.#o=typeof r!="number"?r.AspectRatio:r,this.UpdateProjectionMatrix()}UpdateFrustumPlanes(t=!1){const[e,i,r,u,m,g,y,V,w,U,x,N,M,b,A,R]=this.#a;if(this.#e[0]=M+w,this.#e[1]=b+U,this.#e[2]=A+x,this.#e[3]=R+N,this.#e[4]=M-w,this.#e[5]=b-U,this.#e[6]=A-x,this.#e[7]=R-N,this.#e[8]=M-m,this.#e[9]=b-g,this.#e[10]=A-y,this.#e[11]=R-V,this.#e[12]=M-e,this.#e[13]=b-i,this.#e[14]=A-r,this.#e[15]=R-u,this.#e[16]=M+m,this.#e[17]=b+g,this.#e[18]=A+y,this.#e[19]=R+V,this.#e[20]=M+e,this.#e[21]=b+i,this.#e[22]=A+r,this.#e[23]=R+u,!t)return this.#e;for(let v=0;v<6;++v){const C=v*4,P=Math.hypot(this.#e[C+0],this.#e[C+1],this.#e[C+2])||1;this.#e[C+0]/=P,this.#e[C+1]/=P,this.#e[C+2]/=P,this.#e[C+3]/=P}return this.#e}UpdateViewProjectionMatrix(t=!0){return t&&n.inverse(this.LocalMatrix,this.#n),n.multiply(this.ProjectionMatrix,this.#n,this.#a)}UpdateProjectionMatrix(){const t=j.DegreesToRadians(this.#t);return n.perspective(t,this.#o,this.#i,this.#s,this.ProjectionMatrix)}LookAt(t,e=this.#r){n.lookAt(this.Position,t,e,this.#n)}get ViewProjectionMatrix(){return this.#a}set FieldOfView(t){this.#t=t,this.UpdateProjectionMatrix()}get FieldOfView(){return this.#t}set Near(t){this.#i=t,this.UpdateProjectionMatrix()}get Near(){return this.#i}set Far(t){this.#s=t,this.UpdateProjectionMatrix()}get Far(){return this.#s}set AspectRatio(t){this.#o=typeof t!="number"?t.AspectRatio:t,this.UpdateProjectionMatrix()}get AspectRatio(){return this.#o}}var wt="struct VertexInput{@location(0)position: vec4f,@location(1)color: vec4f};struct VertexOutput{@location(0)color: vec4f,@builtin(position)position: vec4f};@vertex fn cubeVertex(input: VertexInput)->VertexOutput {return VertexOutput(input.color,GetVertexClipSpace(input.position));}@fragment fn cubeFragment(vertex: VertexOutput)->@location(0)vec4f {return vertex.color*color;}";/**
 * @module Scene Graphs
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Scene Graphs
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-scene-graphs.html}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.2.0
 * @license MIT
 */(async function(S){let t;S.style.backgroundColor="#000";try{t=new(await St.Renderer(S,"Scene Graphs",{alphaMode:"premultiplied"}))}catch(s){alert(s)}const e={min:-90,max:90,step:1,converters:GUI.converters.radToDeg},i={min:-180,max:180,step:1,converters:GUI.converters.radToDeg},r=new ot,u=new k,m=new k(r.Set(8355711)),g=new k(r.Set(12566463,191)),[y,V,w]=[0,1,2],U=new Set([0,1,2]),x=[40,30,50],N=[10,2,2],M=4,b=[];let A=!1,R,v,C=0;const P=5;let O=0;const X=[];let G,Y=0;const a={cameraRotation:j.DegreesToRadians(-45),animate:!1,showMeshNodes:!1,showAllTransforms:!1,position:j.Vec3.create(),rotation:j.Vec3.create(),scale:j.Vec3.set(1,1,1)},F=new Bt,D=new GUI().onChange(W);D.add(a,"cameraRotation",i),D.add(a,"animate").onChange(s=>p.enable(!s)),D.add(a,"showMeshNodes").onChange(rt),D.add(a,"showAllTransforms").onChange(et);const p=D.addFolder("Orientation");p.onChange(()=>G.Transform=[a.position,a.rotation,a.scale]);const nt=[p.add(a.position,"0",-200,200,1).name("Position X"),p.add(a.position,"1",-200,200,1).name("Position Y"),p.add(a.position,"2",-200,200,1).name("Position Z"),p.add(a.rotation,"0",e).name("Rotation X"),p.add(a.rotation,"1",e).name("Rotation Y"),p.add(a.rotation,"2",e).name("Rotation Z"),p.add(a.scale,"0",.1,100).name("Scale X"),p.add(a.scale,"1",.1,100).name("Scale Y"),p.add(a.scale,"2",.1,100).name("Scale Z")],at=[0,x[V]/3*2-x[V]/2,N[w]/2+x[w]/2],Z=x[y]+10,q=x[V]+3,_=[x[y]+6,q*M+6,x[w]+4],B=new yt,$=new It,L=new t.Pipeline,ht=_[y]+Z,H=(M*2+1)*P,ct=ht/2*(P-1)/2+4,J=L.CreateShaderModule([At,wt]),{layout:dt,buffer:ft}=ut();await t.AddPipeline(L,{primitive:L.CreatePrimitiveState(),depthStencil:L.CreateDepthStencilState(),fragment:L.CreateFragmentState(J,void 0,void 0,"cubeFragment"),vertex:L.CreateVertexState(J,[$.GetPositionBufferLayout(L),dt],void 0,"cubeVertex")}),t.CreatePassDescriptor(t.CreateColorAttachment(),t.CreateDepthStencilAttachment()),Array.from({length:5}).forEach((s,o)=>xt(F,o));const lt=K(D.addFolder("Nodes"),F);tt(F.Children[0]),et(!1),rt(!1);function K(s,o,c,h){const d=[],it=h===void 0;if(o.Label!=="Scene"){const E=`${it?"":`${h} +-`}${o.Label}`;d.push(bt(s,E,()=>tt(o)))}return h=it?"":`${h}${c?"   ":" | "}`,d.push(...o.Children.map((E,gt)=>K(s,E,gt===o.Children.length-1,h))),d.flat()}function Q(){const{Position:s,Rotation:o,Scaling:c}=G;a.position.set(s),a.rotation.set(o),a.scale.set(c),p.updateDisplay()}function ut(){const o=new Uint8Array(96),c=[200,200,70,90,130,110,70,200,210,160,160,220,200,70,120,80,70,200];for(let h=0,d=0;h<24;d=(++h/4|0)*3)o.set(c.slice(d,d+3),h*4),o[h*4+3]=255;return $.AddVertexBuffer(L,o,{name:"color",format:"unorm8x4"},void 0,"cubeVertex")}function tt(s){G=s,p.name(`Orientation: ${s.Label}`),Q()}function et(s){nt.forEach((o,c)=>o.show(s||U.has(c)))}function rt(s){for(const o of lt)o.domElement.textContent.includes("mesh")&&o.show(s)}function T(s,o,c,h){const d=new Vt($,h??u,s,o);return d.SetRenderPipeline(L),L.AddVertexBuffers(ft),h&&X.push(d),d.Transform=c,d}function mt(s,o){const c=`drawer${o}`,h=_[V]/2-x[V]/2-5,d=T(c,s,[[0,q*o-h,3]]);b.push(d),T(`${c}-drawer-mesh`,d,[void 0,void 0,x],u),T(`${c}-handle-mesh`,d,[at,void 0,N],m)}function xt(s,o){const c=`cabinet${o}`,h=T(c,s,[[o*Z,0,0]]);T(`${c}-mesh`,h,[void 0,void 0,_],g);for(let d=0;d<M;++d)mt(h,d)}function pt(s){C===O&&(L.AddBindGroupFromResources([s.ProjectionBuffer,s.Material.ColorBuffer]),O=Math.min(++O,H)),s.UpdateProjectionMatrix(B.ViewProjectionMatrix),L.SetActiveBindGroups(C),C=++C%H,t.Render(!1)}function W(){R||(R=requestAnimationFrame(Lt))}function Ct(){b.forEach((s,o)=>s.Position[2]=j.Lerp(3,x[2]*.8,Math.sin(Y+o)*.5+.5))}function Lt(){R=void 0,B.ResetLocalMatrix(),B.Translate([ct,20,0]),B.RotateY(a.cameraRotation),B.Translate([0,0,300]),B.UpdateViewProjectionMatrix(),F.UpdateWorldMatrix(),X.forEach(h=>pt(h)),t.Submit();const s=a.animate,o=performance.now()*.001,c=A&&o-v||0;v=o,s&&(Y+=c),A=s,a.animate&&(Ct(),Q(),W())}new ResizeObserver(s=>{for(const o of s){const{inlineSize:c,blockSize:h}=o.contentBoxSize[0];t.SetCanvasSize(c,h),B.AspectRatio=t.AspectRatio,B.UpdateViewProjectionMatrix()}W()}).observe(document.body)})(document.getElementById("lesson"));
