import{D as C,U as c,a}from"./index-DkLC8RgG.js";import{c as b}from"./F-CQ4x-uOT.js";var y="struct VertexOutput{@location(0)color: vec4f,@builtin(position)position: vec4f};@group(0)@binding(0)var<uniform>matrix: mat4x4f;@vertex fn vertex(@location(1)position: vec4f,@location(0)color: vec4f)->VertexOutput{var output: VertexOutput;output.position=matrix*position;output.color=color;return output;}@fragment fn fragment(@location(0)color: vec4f)->@location(0)vec4f {return color;}";/**
 * @module Orthographic Projection
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Orthographic Projection
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-orthographic-projection.html}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.11
 * @license MIT
 */(async function(n){let e;n.style.backgroundPosition="-1.5px -1.5px, -1.5px -1.5px, -1px -1px, -1px -1px",n.style.backgroundSize="100px 100px, 100px 100px, 10px 10px, 10px 10px",n.style.backgroundColor="#000",n.style.backgroundImage=`
        linear-gradient(       #666 1.5px, transparent 1.5px),
        linear-gradient(90deg, #666 1.5px, transparent 1.5px),
        linear-gradient(       #333 1px,   transparent 1px),
        linear-gradient(90deg, #333 1px,   transparent 1px)
    `;try{e=new(await C.RenderPipeline(n,"Orthographic Projection",{alphaMode:"premultiplied"}))}catch(s){alert(s)}const t={translation:[45,100,0],scale:[1,1,1],rotation:[c.DegreesToRadians(40),c.DegreesToRadians(25),c.DegreesToRadians(325)]},i={min:-360,max:360,step:1,converters:GUI.converters.radToDeg},o=new GUI().onChange(x);o.add(t.translation,"0",0,1e3).name("translation.x"),o.add(t.translation,"1",0,1e3).name("translation.y"),o.add(t.translation,"2",-1e3,1e3).name("translation.z"),o.add(t.rotation,"0",i).name("rotation.x"),o.add(t.rotation,"1",i).name("rotation.y"),o.add(t.rotation,"2",i).name("rotation.z"),o.add(t.scale,"0",-5,5).name("scale.x"),o.add(t.scale,"1",-5,5).name("scale.y"),o.add(t.scale,"2",-5,5).name("scale.z");const{vertexData:f,vertices:p}=b(),l=e.CreateShaderModule(y),{layout:m,buffer:d}=e.CreateVertexBuffer([{name:"position",format:"float32x3"},{name:"color",format:"unorm8x4"}],p);e.CreatePipeline({vertex:e.CreateVertexState(l,void 0,m),depthStencil:e.CreateDepthStencilState(),fragment:e.CreateFragmentState(l),primitive:{cullMode:"front"}});const{matrix:r,buffer:u}=e.CreateUniformBuffer("matrix");e.CreatePassDescriptor(e.CreateColorAttachment(),void 0,e.CreateDepthAttachment()),e.SetBindGroups(e.CreateBindGroup(e.CreateBindGroupEntries({buffer:u}))),e.WriteBuffer(d,f),e.SetVertexBuffers(d);function x(){a.copy(e.OrthographicProjection,r),a.translate(r,t.translation,r),a.rotateX(r,t.rotation[0],r),a.rotateY(r,t.rotation[1],r),a.rotateZ(r,t.rotation[2],r),a.scale(r,t.scale,r),e.WriteBuffer(u,r),e.Render(p)}new ResizeObserver(s=>{for(const g of s){const{inlineSize:v,blockSize:h}=g.contentBoxSize[0];e.SetCanvasSize(v,h),e.UpdateOrthographicProjection(400,-400)}x()}).observe(document.body)})(document.getElementById("lesson"));
