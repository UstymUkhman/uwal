import{M as N}from"./MipmapFilter-nkAaR1eK.js";import{D as h,v as F,a,C as _,F as n,A as w}from"./index-Dm8t6IxS.js";import{F as D}from"./f-CdSZvatx.js";import{Q as L}from"./Quad-VFYOTGYq.js";const z=""+new URL("granite-Bhx_bMIh.jpeg",import.meta.url).href,j=""+new URL("coins-DSWNLmZu.jpg",import.meta.url).href;/**
 * @module GPU Mipmaps
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Loading Images into Textures
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-importing-textures.html#generating-mips-on-the-gpu}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.5
 * @license MIT
 */(async function(E){let t;try{t=new(await h.RenderPipeline(E,"GPU Mipmaps"))}catch(e){alert(e)}const I=async e=>await c.CreateBitmapImage(await(await fetch(e)).blob(),{colorSpaceConversion:"none"}),c=new(await h.Texture());c.SetRenderer(t);const p=await Promise.all([u(D,{mipmaps:!0}),u(j,{mipmaps:!0}),u(z,{mipmaps:!0})]);let l=0;const b=0,R=[],T=1,g=2e3,M=[0,1,0],U=[0,0,0],A=Math.PI*60/180,x=[0,0,2],S=F.set(1.2,.7),m=a.perspective(A,t.AspectRatio,T,g),P=a.inverse(a.lookAt(x,U,M)),C=a.multiply(m,P);t.CreatePipeline({module:t.CreateShaderModule([L,N])});const v=t.CreateColorAttachment();v.clearValue=new _(5000268).rgba,t.CreatePassDescriptor(v);for(let e=0;e<8;e++){const s=c.CreateSampler({addressModeU:w.REPEAT,addressModeV:w.REPEAT,magFilter:e&1?n.LINEAR:n.NEAREST,minFilter:e&2?n.LINEAR:n.NEAREST,mipmapFilter:e&4?n.LINEAR:n.NEAREST}),o=16*Float32Array.BYTES_PER_ELEMENT,r=t.CreateBuffer({usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,size:o}),i=new Float32Array(o/Float32Array.BYTES_PER_ELEMENT),f=i.subarray(b,16);t.AddBindGroups(p.map(d=>t.CreateBindGroup(t.CreateBindGroupEntries([s,d.createView(),{buffer:r}])))),R.push({matrixBuffer:r,matrixValues:i,matrix:f})}async function u(e,s){const{mipmaps:o,flip:r}=s,i=await I(e);return c.CopyImageToTexture(i,{flipY:r,create:{usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,format:"rgba8unorm",mipmaps:o}})}function B(){R.forEach(({matrix:e,matrixBuffer:s,matrixValues:o},r)=>{const f=r%4-1.5,d=+(r<4)*2-1,y=r*p.length+l,G=[f*S[0],d*S[1],-50*.5];a.translate(C,G,e),a.rotateX(e,Math.PI*.5,e),a.scale(e,[1,50*2,1],e),a.translate(e,[-.5,-.5,0],e),t.WriteBuffer(s,o),t.SetActiveBindGroups(y),t.Render(6,!1)}),t.Submit()}new ResizeObserver(e=>{for(const s of e){const{inlineSize:o,blockSize:r}=s.contentBoxSize[0];t.SetCanvasSize(o,r)}a.perspective(A,t.AspectRatio,T,g,m),a.multiply(m,P,C),B()}).observe(document.body),E.addEventListener("click",()=>{l=(l+1)%p.length,B()})})(document.getElementById("lesson"));
