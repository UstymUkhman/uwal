import{c as w,a as F}from"./mipmaps-kMQ0t0FP.js";import{U as b,A as P,F as s}from"./index-DbKXUcfv.js";import{v as N,m as o}from"./wgpu-matrix.module-D3z0rCw6.js";import{Q as _,C as L}from"./Quad-C4zpvK4p.js";var z="struct Transform{matrix: mat4x4f};struct VertexOutput{@builtin(position)position: vec4f,@location(0)textureCoord: vec2f};@group(0)@binding(0)var Sampler: sampler;@group(0)@binding(1)var Texture: texture_2d<f32>;@group(0)@binding(2)var<uniform>transform: Transform;@vertex fn vertex(@builtin(vertex_index)index: u32)->VertexOutput {var output: VertexOutput;var position=GetQuadCoord(index);position=(position+1)*0.5;output.position=transform.matrix*vec4f(position,0.0,1.0);output.textureCoord=position*vec2f(1,50);return output;}@fragment fn fragment(@location(0)textureCoord: vec2f)->@location(0)vec4f {return textureSample(Texture,Sampler,textureCoord);}";/**
 * @module Mipmap Filter
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Textures
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-textures.html#mipmapfilter}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.5
 * @license MIT
 */(async function(p){let t;try{t=new(await b.RenderPipeline(p,"Mipmap Filter"))}catch(e){alert(e)}t.CreatePipeline({module:t.CreateShaderModule([_,z])});const x=t.CreateColorAttachment();x.clearValue=new L(5000268).rgba,t.CreatePassDescriptor(x);const l=new(await b.Texture());let f=0;const B=0,E=[],d=[R(w(),"Blended"),R(F(),"Checked")];for(let e=0;e<8;e++){const a=l.CreateSampler({addressModeU:P.REPEAT,addressModeV:P.REPEAT,magFilter:e&1?s.LINEAR:s.NEAREST,minFilter:e&2?s.LINEAR:s.NEAREST,mipmapFilter:e&4?s.LINEAR:s.NEAREST}),n=16*Float32Array.BYTES_PER_ELEMENT,r=t.CreateBuffer({usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,size:n}),i=new Float32Array(n/Float32Array.BYTES_PER_ELEMENT),c=i.subarray(B,16);t.AddBindGroups(d.map(u=>t.CreateBindGroup(t.CreateBindGroupEntries([a,u.createView(),{buffer:r}])))),E.push({matrixBuffer:r,matrixValues:i,matrix:c})}const v=1,T=2e3,M=[0,1,0],I=[0,0,0],g=60*Math.PI/180,U=[0,0,2],C=N.set(1.2,.7),m=o.perspective(g,t.AspectRatio,v,T),S=o.inverse(o.lookAt(U,I,M)),A=o.multiply(m,S);function R(e,a){const n=l.CreateTexture({usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,size:[e[0].width,e[0].height],mipLevelCount:e.length,label:`${a} Texture`,format:"rgba8unorm"});return e.forEach(({data:r,width:i,height:c},u)=>l.WriteTexture(r,{bytesPerRow:i*4,texture:n,mipLevel:u,width:i,height:c})),n}function h(){E.forEach(({matrix:e,matrixBuffer:a,matrixValues:n},r)=>{const c=r%4-1.5,u=+(r<4)*2-1,y=r*d.length+f,G=[c*C[0],u*C[1],-50*.5];o.translate(A,G,e),o.rotateX(e,.5*Math.PI,e),o.scale(e,[1,50*2,1],e),o.translate(e,[-.5,-.5,0],e),t.WriteBuffer(a,n),t.SetActiveBindGroups(y),t.Render(6,!1)}),t.Submit()}new ResizeObserver(e=>{for(const a of e){const{inlineSize:n,blockSize:r}=a.contentBoxSize[0];t.SetCanvasSize(n,r)}o.perspective(g,t.AspectRatio,v,T,m),o.multiply(m,S,A),h()}).observe(p),p.addEventListener("click",()=>{f=(f+1)%d.length,h()})})(document.getElementById("lesson"));
