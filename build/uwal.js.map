{"version":3,"file":"uwal.js","sources":["../lib/Constants.js","../lib/Errors.js","../lib/pipeline/BasePipeline.js","../lib/pipeline/RenderPipeline.js","../lib/pipeline/ComputePipeline.js","../lib/UWAL.js"],"sourcesContent":["/** @param {Record<string, unknown>} values */\nfunction CreateConstantObject(values)\n{\n    /** @type {object} */ const constants = {};\n\n    for (let value in values)\n        constants[value] = { value: values[value] };\n\n    return Object.freeze(Object.create(null, constants));\n}\n\n/**\n * @typedef {\"DEVICE_LOST\"} EventType\n * @type {Readonly<Record<EventType, string>>}\n */\nexport const EVENT = CreateConstantObject(\n{\n    DEVICE_LOST: \"Device::Lost\"\n});\n\n/**\n * @typedef {\"WEBGPU_NOT_SUPPORTED\"      |\n *           \"ADAPTER_NOT_FOUND\"         |\n *           \"DEVICE_NOT_FOUND\"          |\n *           \"DEVICE_NOT_REQUESTED\"      |\n *           \"DEVICE_LOST\"               |\n *           \"CANVAS_NOT_FOUND\"          |\n *           \"CONTEXT_NOT_FOUND\"         |\n *           \"COMMAND_ENCODER_NOT_FOUND\"\n * } ErrorCause\n *\n * @type {Readonly<Record<ErrorCause, ErrorCause>>}\n */\nexport const ERROR = CreateConstantObject(\n{\n    WEBGPU_NOT_SUPPORTED: \"WEBGPU_NOT_SUPPORTED\",\n    ADAPTER_NOT_FOUND: \"ADAPTER_NOT_FOUND\",\n    DEVICE_NOT_FOUND: \"DEVICE_NOT_FOUND\",\n    DEVICE_NOT_REQUESTED: \"DEVICE_NOT_REQUESTED\",\n    DEVICE_LOST: \"DEVICE_LOST\",\n    CANVAS_NOT_FOUND: \"CANVAS_NOT_FOUND\",\n    CONTEXT_NOT_FOUND: \"CONTEXT_NOT_FOUND\",\n    COMMAND_ENCODER_NOT_FOUND: \"COMMAND_ENCODER_NOT_FOUND\"\n});\n\n/** @type {Readonly<Record<ErrorCause, string>>} */\nexport const ERROR_MESSAGE = CreateConstantObject(\n{\n    WEBGPU_NOT_SUPPORTED: \"WebGPU is not supported in this browser.\",\n    ADAPTER_NOT_FOUND: \"Failed to get a GPUAdapter.\",\n    DEVICE_NOT_FOUND: \"Failed to get a GPUDevice.\",\n    DEVICE_NOT_REQUESTED: \"GPUDevice was not requested.\",\n    DEVICE_LOST: \"WebGPU device was lost.\",\n    CANVAS_NOT_FOUND: \"Failed to get a WebGPU canvas.\",\n    CONTEXT_NOT_FOUND: \"Failed to get a WebGPU context.\",\n    COMMAND_ENCODER_NOT_FOUND: \"Failed to get a GPUCommandEncoder.\"\n});\n\n/** @type {Readonly<Record<ErrorCause, number>>} */\nexport const ERROR_CAUSE = CreateConstantObject(\n{\n    WEBGPU_NOT_SUPPORTED: 0,\n    ADAPTER_NOT_FOUND: 1,\n    DEVICE_NOT_FOUND: 2,\n    DEVICE_NOT_REQUESTED: 3,\n    DEVICE_LOST: 4,\n    CANVAS_NOT_FOUND: 5,\n    CONTEXT_NOT_FOUND: 6,\n    COMMAND_ENCODER_NOT_FOUND: 7\n});\n","import { ERROR_MESSAGE, ERROR_CAUSE } from \"@/Constants\";\n\n/**\n * @param {import(\"@/Constants\").ErrorCause} warning\n * @param {string} [message = undefined]\n */\nexport function ThrowWarning(warning, message)\n{\n    console.warn(ERROR_MESSAGE[warning] + (message ?? \"\"));\n}\n\n/**\n * @param {import(\"@/Constants\").ErrorCause} error\n * @param {string} [message = undefined]\n */\nexport function ThrowError(error, message)\n{\n    throw new Error(ERROR_MESSAGE[error] + (message ?? \"\"), { cause: ERROR_CAUSE[error] });\n}\n","import { ThrowError, ThrowWarning } from \"@/Errors\";\nimport { ERROR } from \"@/Constants\";\n\n/** @abstract */\nexport default class BasePipeline\n{\n    /** @type {string} */ #CommandEncoderLabel;\n\n    /** @protected @type {GPUDevice} */ Device;\n    /** @protected @type {GPUBindGroup[]} */ BindGroups = [];\n    /** @type {GPUCommandEncoder | undefined} */ #CommandEncoder;\n\n    /**\n     * @param {GPUDevice} [device = undefined]\n     * @param {string} [commandEncoderLabel = \"\"]\n     */\n    constructor(device, commandEncoderLabel)\n    {\n        !device && ThrowError(ERROR.DEVICE_NOT_REQUESTED);\n\n        this.Device = device;\n        this.#CommandEncoderLabel = commandEncoderLabel;\n    }\n\n    /**\n     * @typedef {Object} BufferDescriptor\n     * @property {GPUSize64} size\n     * @property {GPUBufferUsageFlags} usage\n     * @property {string} [label = undefined]\n     * @property {boolean} [mappedAtCreation = undefined]\n     * @param {BufferDescriptor} descriptor\n     */\n    CreateBuffer(descriptor)\n    {\n        return this.Device.createBuffer(descriptor);\n    }\n\n    /**\n     * @param {GPUBuffer} buffer\n     * @param {BufferSource | SharedArrayBuffer} data\n     * @param {GPUSize64} [bufferOffset = 0]\n     * @param {GPUSize64} [dataOffset = undefined]\n     * @param {GPUSize64} [size = undefined]\n     */\n    WriteBuffer(buffer, data, bufferOffset = 0, dataOffset, size)\n    {\n        this.Device.queue.writeBuffer(buffer, bufferOffset, data, dataOffset, size);\n    }\n\n    /**\n     * @param {GPUBuffer} source\n     * @param {GPUBuffer} destination\n     * @param {GPUSize64} size\n     * @param {GPUSize64} [sourceOffset = 0]\n     * @param {GPUSize64} [destinationOffset = 0]\n     */\n    CopyBufferToBuffer(source, destination, size, sourceOffset = 0, destinationOffset = 0)\n    {\n        this.CommandEncoder.copyBufferToBuffer(source, sourceOffset, destination, destinationOffset, size);\n    }\n\n    /**\n     * @param {string | string[]} shader\n     * @param {string} [label = \"\"]\n     * @param {any} [sourceMap = undefined]\n     * @param {GPUShaderModuleCompilationHint[]} [hints = undefined]\n     */\n    CreateShaderModule(shader, label = \"\", sourceMap, hints)\n    {\n        const code = Array.isArray(shader) ? shader.join(\"\\n\\n\") : shader;\n        return this.Device.createShaderModule({ label, code, sourceMap, compilationHints: hints });\n    }\n\n    /** @param {GPUBindingResource | GPUBindingResource[]} resources */\n    CreateBindGroupEntries(resources)\n    {\n        return Array.isArray(resources)\n            ? resources.map((resource, binding) => ({ binding, resource }))\n            : [{ binding: 0, resource: resources }];\n    }\n\n    /**\n     * @typedef {Object} BindGroupDescriptor\n     * @property {GPUBindGroupLayout} layout\n     * @property {Iterable<GPUBindGroupEntry>} entries\n     * @property {string} [label = undefined]\n     * @param {BindGroupDescriptor} descriptor\n     */\n    CreateBindGroup(descriptor)\n    {\n        return this.Device.createBindGroup(descriptor);\n    }\n\n    /** @param {GPUBindGroup | GPUBindGroup[]} bindGroups */\n    AddBindGroups(bindGroups)\n    {\n        this.BindGroups = Array.isArray(bindGroups) ? bindGroups : [bindGroups];\n    }\n\n    CreateCommandEncoder()\n    {\n        return this.#CommandEncoder = this.Device.createCommandEncoder({ label: this.#CommandEncoderLabel });\n    }\n\n    SubmitCommandBuffer()\n    {\n        this.Device.queue.submit([this.CommandEncoder.finish()]);\n    }\n\n    /** @protected */\n    get CommandEncoder()\n    {\n        if (!this.#CommandEncoder)\n        {\n            const message = ` ${this.#CommandEncoderLabel && `Label: \"${this.#CommandEncoderLabel}\". `}`;\n            ThrowWarning(ERROR.COMMAND_ENCODER_NOT_FOUND, message + \"Creating a new one.\");\n            return this.CreateCommandEncoder();\n        }\n\n        return this.#CommandEncoder;\n    }\n}\n","import { BasePipeline } from \"@/pipeline\";\n\nexport default class RenderPipeline extends BasePipeline\n{\n    /** @type {GPUTextureFormat} */ #PreferredCanvasFormat;\n    /** @type {GPURenderPassEncoder | undefined} */ #CurrentPass;\n\n    /**\n     * @param {GPUDevice} [device = undefined]\n     * @param {string} [commandEncoderLabel = \"\"]\n     * @param {GPUTextureFormat} [preferredFormat = undefined]\n     */\n    constructor(device, commandEncoderLabel, preferredFormat)\n    {\n        super(device, commandEncoderLabel);\n        this.#PreferredCanvasFormat = preferredFormat;\n    }\n\n    /**\n     * @param {GPUTextureView} [view = undefined]\n     * @param {GPULoadOp} [loadOp = \"load\"]\n     * @param {GPUStoreOp} [storeOp = \"store\"]\n     * @param {GPUColor} [clearValue = undefined]\n     * @param {GPUTextureView} [resolveTarget = undefined]\n     * @param {GPUIntegerCoordinate} [depthSlice = undefined]\n     */\n    CreateColorAttachment(view, loadOp = \"load\", storeOp = \"store\", clearValue, resolveTarget, depthSlice)\n    {\n        return { view, loadOp, storeOp, clearValue, resolveTarget, depthSlice };\n    }\n\n    /**\n     * @param {GPURenderPassColorAttachment | GPURenderPassColorAttachment[]} colorAttachments\n     * @param {string} [label = \"\"]\n     * @param {GPURenderPassDepthStencilAttachment} [depthStencilAttachment = undefined]\n     * @param {GPUQuerySet} [occlusionQuerySet = undefined]\n     * @param {GPURenderPassTimestampWrites} [timestampWrites = undefined]\n     * @param {GPUSize64} [maxDrawCount = undefined]\n     */\n    CreateRenderPassDescriptor(\n        colorAttachments, label = \"\", depthStencilAttachment, occlusionQuerySet, timestampWrites, maxDrawCount\n    ) {\n        colorAttachments = Array.isArray(colorAttachments) ? colorAttachments : [colorAttachments];\n        return { colorAttachments, label, depthStencilAttachment, occlusionQuerySet, timestampWrites, maxDrawCount };\n    }\n\n    /**\n     * @param {GPUShaderModule} module\n     * @param {string} [entry = \"vertex\"]\n     * @param {Record<string, GPUPipelineConstantValue>} [constants = undefined]\n     * @param {Iterable<GPUVertexBufferLayout | null>} [buffers = undefined]\n     */\n    CreateVertexState(module, entry = \"vertex\", constants, buffers)\n    {\n        return { module, entryPoint: entry, constants, buffers };\n    }\n\n    /**\n     * @param {GPUShaderModule} module\n     * @param {string} [entry = \"fragment\"]\n     * @param {Iterable<GPUColorTargetState | null>} [targets = [undefined]]\n     * @param {Record<string, GPUPipelineConstantValue>} [constants = undefined]\n     */\n    CreateFragmentState(module, entry = \"fragment\", targets, constants)\n    {\n        targets ??= [{ format: this.#PreferredCanvasFormat }];\n        return { module, entryPoint: entry, targets, constants };\n    }\n\n    /**\n     * @typedef {Object} RenderPipelineDescriptor\n     * @property {GPUVertexState} vertex\n     * @property {string} [label = undefined]\n     * @property {GPUFragmentState} [fragment = undefined]\n     * @property {GPUPipelineLayout | GPUAutoLayoutMode} [layout = \"auto\"]\n     * @property {GPUPrimitiveState} [primitive = undefined]\n     * @property {GPUDepthStencilState} [depthStencil = undefined]\n     * @property {GPUMultisampleState} [multisample = undefined]\n     * @param {RenderPipelineDescriptor} descriptor\n     */\n    CreateRenderPipeline(descriptor)\n    {\n        const layout = descriptor.layout ?? \"auto\";\n        return this.Device.createRenderPipeline({ ...descriptor, layout });\n    }\n\n    /**\n     * @param {GPURenderPassDescriptor} descriptor\n     * @param {GPURenderPipeline} pipeline\n     * @typedef {Object} DrawParams\n     * @property {GPUSize32} vertexCount\n     * @property {GPUSize32} [instanceCount = undefined]\n     * @property {GPUSize32} [firstVertex = undefined]\n     * @property {GPUSize32} [firstInstance = undefined]\n     * @param {DrawParams | GPUSize32} drawParams\n     * @param {boolean} [submit = true]\n     */\n    Render(descriptor, pipeline, drawParams, submit = true)\n    {\n        if (!this.#CurrentPass)\n        {\n            const encoder = this.CreateCommandEncoder();\n            this.#CurrentPass = encoder.beginRenderPass(descriptor);\n            this.#CurrentPass.setPipeline(pipeline);\n        }\n\n        for (let g = 0, l = this.BindGroups.length; g < l; ++g)\n            this.#CurrentPass.setBindGroup(g, this.BindGroups[g]);\n\n        drawParams = typeof drawParams === \"number\"\n            ? { vertexCount: drawParams }\n            : drawParams;\n\n        this.#CurrentPass.draw(\n            drawParams.vertexCount,\n            drawParams.instanceCount,\n            drawParams.firstVertex,\n            drawParams.firstInstance\n        );\n\n        if (submit)\n        {\n            this.#CurrentPass.end();\n            this.#CurrentPass = undefined;\n            this.SubmitCommandBuffer();\n        }\n    }\n\n    get CurrentPass()\n    {\n        return this.#CurrentPass;\n    }\n}\n","import { BasePipeline } from \"@/pipeline\";\n\nexport default class ComputePipeline extends BasePipeline\n{\n    /** @type {number[]} */ #Workgroups = [1];\n\n    /**\n     * @param {GPUDevice} [device = undefined]\n     * @param {string} [commandEncoderLabel = \"\"]\n     */\n    constructor(device, commandEncoderLabel)\n    {\n        super(device, commandEncoderLabel);\n    }\n\n    /**\n     * @param {string} [label = \"\"]\n     * @param {GPUQuerySet} [querySet = undefined]\n     * @param {GPUSize32} [beginningOfPassWriteIndex = undefined]\n     * @param {GPUSize32} [endOfPassWriteIndex = undefined]\n     */\n    CreateComputePassDescriptor(label = \"\", querySet, beginningOfPassWriteIndex, endOfPassWriteIndex)\n    {\n        return {\n            label,\n            timestampWrites: querySet\n                ? { querySet, beginningOfPassWriteIndex, endOfPassWriteIndex }\n                : undefined\n        };\n    }\n\n    /**\n     * @typedef {Object} ComputePipelineDescriptor\n     * @property {GPUShaderModule} module\n     * @property {string} [entry = \"compute\"]\n     * @property {string} [label = undefined]\n     * @property {GPUPipelineLayout | GPUAutoLayoutMode} [layout = \"auto\"]\n     * @property {Record<string, GPUPipelineConstantValue>} [constants = undefined]\n     * @param {ComputePipelineDescriptor} descriptor\n     */\n    CreateComputePipeline(descriptor)\n    {\n        const layout = descriptor.layout ?? \"auto\";\n        return this.Device.createComputePipeline({ label: descriptor.label, layout, compute: descriptor });\n    }\n\n    /**\n     * @param {GPUComputePipeline} pipeline\n     * @param {GPUComputePassDescriptor} [descriptor = undefined]\n     */\n    Compute(pipeline, descriptor)\n    {\n        const pass = this.CommandEncoder.beginComputePass(descriptor);\n\n        pass.setPipeline(pipeline);\n\n        for (let g = 0, l = this.BindGroups.length; g < l; ++g)\n            pass.setBindGroup(g, this.BindGroups[g]);\n\n        // @ts-ignore\n        pass.dispatchWorkgroups(...this.#Workgroups);\n        pass.end();\n    }\n\n    /** @param {number | number[]} workgroups */\n    set Workgroups(workgroups)\n    {\n        this.#Workgroups = Array.isArray(workgroups) ? workgroups : [workgroups];\n    }\n}\n","/**\n * @module UWAL\n * @author Ustym Ukhman <ustym.ukhman@gmail.com>\n * @description Unopinionated WebGPU Abstraction Library\n * @version 0.0.1\n * @license MIT\n */\n\nimport { RenderPipeline, ComputePipeline } from \"@/pipeline\";\nimport { ERROR, EVENT } from \"@/Constants\";\nimport { ThrowError } from \"@/Errors\";\n\nexport default class UWAL\n{\n    /** @type {GPUAdapter | null} */ static #Adapter = null;\n    /** @type {GPUDevice | null} */ static #Device = null;\n\n    /** @type {HTMLCanvasElement} */ static #Canvas;\n    /** @type {GPUCanvasContext} */ static #Context;\n\n    /** @type {GPUTextureFormat} */ static #PreferredCanvasFormat;\n\n    /** @type {GPURequestAdapterOptions} */ static #AdapterOptions =\n    {\n        powerPreference: undefined, forceFallbackAdapter: false\n    }\n\n    /** @type {GPUDeviceDescriptor} */ static #DeviceDescriptor =\n    {\n        label: \"\", requiredFeatures: [], requiredLimits: {}\n    }\n\n    /** @type {((detail: GPUDeviceLostInfo) => unknown) | undefined} */ static OnDeviceLost;\n\n    /** @param {GPUPowerPreference} [powerPreference = undefined] */\n    static SetAdapterOptions(powerPreference = undefined, forceFallbackAdapter = false)\n    {\n        UWAL.#AdapterOptions.powerPreference = powerPreference;\n        UWAL.#AdapterOptions.forceFallbackAdapter = forceFallbackAdapter;\n    }\n\n    /**\n     * @param {Iterable<GPUFeatureName>} [requiredFeatures = []]\n     * @param {Record<string, GPUSize64>} [requiredLimits = {}]\n     */\n    static SetDeviceDescriptor(label = \"\", requiredFeatures = [], requiredLimits = {})\n    {\n        UWAL.#DeviceDescriptor.label = label;\n        UWAL.#DeviceDescriptor.requiredFeatures = requiredFeatures;\n        UWAL.#DeviceDescriptor.requiredLimits = requiredLimits;\n    }\n\n    static SetCanvasSize(width = innerWidth, height = innerHeight)\n    {\n        !UWAL.#Canvas && ThrowError(ERROR.CANVAS_NOT_FOUND);\n        !UWAL.#Device && ThrowError(ERROR.DEVICE_NOT_FOUND);\n\n        const { maxTextureDimension2D } = UWAL.#Device.limits;\n\n        width = Math.max(1, Math.min(width, maxTextureDimension2D));\n        height = Math.max(1, Math.min(height, maxTextureDimension2D));\n\n        if (UWAL.#Canvas.width !== width || UWAL.#Canvas.height !== height)\n        {\n            UWAL.#Canvas.height = height;\n            UWAL.#Canvas.width = width;\n        }\n    }\n\n    /**\n     * @param {HTMLCanvasElement} canvas\n     * @param {string} [commandEncoderLabel = \"\"]\n     * @typedef {Object} ConfigurationOptions\n     * @property {GPUTextureFormat} [format = undefined]\n     * @property {GPUTextureUsageFlags} [usage = 0x10] - GPUTextureUsage.RENDER_ATTACHMENT\n     * @property {Iterable<GPUTextureFormat>} [viewFormats = []]\n     * @property {PredefinedColorSpace} [colorSpace = \"srgb\"]\n     * @property {GPUCanvasAlphaMode} [alphaMode = \"opaque\"]\n     * @param {ConfigurationOptions} [options = {}]\n     */\n    static RenderPipeline(canvas, commandEncoderLabel = \"\", options = {})\n    {\n        return (async () =>\n        {\n            const device = await UWAL.Device;\n            const context = canvas.getContext(\"webgpu\");\n\n            !context && ThrowError(ERROR.CONTEXT_NOT_FOUND);\n\n            const preferredFormat = options.format ?? UWAL.#PreferredCanvasFormat;\n            const configuration = { ...options, format: preferredFormat };\n\n            context.configure({ device, ...configuration });\n\n            UWAL.#Canvas = canvas;\n            UWAL.#Context = context;\n\n            return new Proxy(RenderPipeline,\n            {\n                construct(Pipeline)\n                {\n                    return new Pipeline(device, commandEncoderLabel, preferredFormat);\n                }\n            });\n        })();\n    }\n\n    /** @param {string} [commandEncoderLabel = \"\"] */\n    static ComputePipeline(commandEncoderLabel = \"\")\n    {\n        return (async () =>\n        {\n            const device = await UWAL.Device;\n\n            return new Proxy(ComputePipeline,\n            {\n                construct(Pipeline)\n                {\n                    return new Pipeline(device, commandEncoderLabel);\n                }\n            });\n        })();\n    }\n\n    /**\n     * @param {GPUBuffer | GPUBuffer[]} [buffers = undefined]\n     * @param {GPUTexture | GPUTexture[]} [textures = undefined]\n     * @param {GPUQuerySet | GPUQuerySet[]} [querySets = undefined]\n     */\n    static Destroy(buffers, textures, querySets)\n    {\n        // Optionally remove all GPUBuffers:\n        buffers = Array.isArray(buffers) ? buffers : [buffers];\n        buffers.forEach(buffer => buffer?.destroy());\n\n        // Optionally remove all GPUTextures:\n        textures = Array.isArray(textures) ? textures : [textures];\n        textures.forEach(texture => texture?.destroy());\n\n        // Optionally remove all GPUQuerySets:\n        querySets = Array.isArray(querySets) ? querySets : [querySets];\n        querySets.forEach(querySet => querySet?.destroy());\n\n        // Remove GPUCanvasContext configuration:\n        UWAL.#Context?.unconfigure();\n\n        // Destroy GPUDevice:\n        UWAL.#Device?.destroy();\n    }\n\n    static #RequestAdapter()\n    {\n        !navigator.gpu && ThrowError(ERROR.WEBGPU_NOT_SUPPORTED);\n\n        UWAL.#PreferredCanvasFormat = navigator.gpu.getPreferredCanvasFormat();\n\n        return async () =>\n        {\n            const adapter = await navigator.gpu.requestAdapter(UWAL.#AdapterOptions);\n            !adapter && ThrowError(ERROR.ADAPTER_NOT_FOUND);\n            return UWAL.#Adapter = adapter;\n        };\n    }\n\n    static #RequestDevice()\n    {\n        return async () =>\n        {\n            const { requiredFeatures, requiredLimits, label } = UWAL.#DeviceDescriptor;\n\n            const device = await (await UWAL.Adapter).requestDevice({\n                requiredFeatures, requiredLimits, defaultQueue: { label }\n            });\n\n            !device && ThrowError(ERROR.DEVICE_NOT_FOUND);\n            device.lost.then(UWAL.#DeviceLost);\n            return UWAL.#Device = device;\n        };\n    }\n\n    /** @param {GPUDeviceLostInfo} detail */\n    static #DeviceLost(detail)\n    {\n        if (UWAL.OnDeviceLost) return UWAL.OnDeviceLost(detail);\n\n        UWAL.#Canvas.dispatchEvent(new CustomEvent(EVENT.DEVICE_LOST, { detail }));\n\n        const message = (detail.message && ` | Message: ${detail.message}`) ?? \".\";\n\n        // If device is destroyed intentionally, `reason` will be `destroyed`.\n        ThrowError(ERROR.DEVICE_LOST, ` Reason: ${detail.reason}` + message);\n    }\n\n    static get Adapter()\n    {\n        return (async () => UWAL.#Adapter ?? (await UWAL.#RequestAdapter()()))();\n    }\n\n    static get Device()\n    {\n        return (async () => UWAL.#Device ?? (await UWAL.#RequestDevice()()))();\n    }\n\n    /** @returns {HTMLCanvasElement | undefined} */\n    static get Canvas()\n    {\n        return UWAL.#Canvas;\n    }\n\n    /** @returns {GPUCanvasContext | undefined} */\n    static get Context()\n    {\n        return UWAL.#Context;\n    }\n\n    static get AspectRatio()\n    {\n        !UWAL.#Canvas && ThrowError(ERROR.CANVAS_NOT_FOUND);\n        return UWAL.#Canvas.width / UWAL.#Canvas.height;\n    }\n\n    static get CurrentTexture()\n    {\n        return UWAL.#Context.getCurrentTexture();\n    }\n\n    static get CurrentTextureView()\n    {\n        return UWAL.CurrentTexture.createView();\n    }\n\n    static get VERSION()\n    {\n        return VERSION;\n    }\n}\n\nconsole.info(`%cUWAL v${UWAL.VERSION}`, \"background:#005a9c;padding:3px;color:#fff;\");\n"],"names":["CreateConstantObject","values","constants","value","EVENT","ERROR","ERROR_MESSAGE","ERROR_CAUSE","ThrowWarning","warning","message","ThrowError","error","_CommandEncoderLabel","_CommandEncoder","BasePipeline","device","commandEncoderLabel","__privateAdd","__publicField","__privateSet","descriptor","buffer","data","bufferOffset","dataOffset","size","source","destination","sourceOffset","destinationOffset","shader","label","sourceMap","hints","code","resources","resource","binding","bindGroups","__privateGet","_PreferredCanvasFormat","_CurrentPass","RenderPipeline","preferredFormat","view","loadOp","storeOp","clearValue","resolveTarget","depthSlice","colorAttachments","depthStencilAttachment","occlusionQuerySet","timestampWrites","maxDrawCount","module","entry","buffers","targets","layout","pipeline","drawParams","submit","encoder","g","l","_Workgroups","ComputePipeline","querySet","beginningOfPassWriteIndex","endOfPassWriteIndex","pass","workgroups","_Adapter","_Device","_Canvas","_Context","_AdapterOptions","_DeviceDescriptor","_RequestAdapter","RequestAdapter_fn","_RequestDevice","RequestDevice_fn","_DeviceLost","DeviceLost_fn","_UWAL","powerPreference","forceFallbackAdapter","requiredFeatures","requiredLimits","width","height","maxTextureDimension2D","canvas","options","context","configuration","Pipeline","textures","querySets","_a","_b","texture","__privateMethod","adapter","detail","UWAL"],"mappings":"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"}